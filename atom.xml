<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rosevil</title>
  
  <subtitle>Technical reflection, little happiness.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rosevil1874.github.io/"/>
  <updated>2018-04-12T08:58:53.078Z</updated>
  <id>https://rosevil1874.github.io/</id>
  
  <author>
    <name>rosevil1874</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Error集锦</title>
    <link href="https://rosevil1874.github.io/2018/04/12/Error%E9%9B%86%E9%94%A6/"/>
    <id>https://rosevil1874.github.io/2018/04/12/Error集锦/</id>
    <published>2018-04-12T08:45:49.000Z</published>
    <updated>2018-04-12T08:58:53.078Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-缩进错误"><a href="#1-缩进错误" class="headerlink" title="1. 缩进错误"></a>1. 缩进错误</h3><blockquote><ol><li>IndentationError: unindent does not match any outer indentation level</li><li>TabError: inconsistent use of tabs and spaces in indentation</li></ol></blockquote><p>这个错误就像全角半角符号一样让人抓狂，要是想整死一个程序员，就悄悄把他代码里的半角字符换成全角的，他就会开始漫长又愉快的debug~<br>你永远不知道自己什么时候会出现缩进错误，即使你认为所有地方都使用了tab键ヽ(｀Д´)ﾉ︵ ┻━┻ ┻━┻ </p><p><strong>解决办法</strong></p><ol><li>老老实实调整，把报错那行重新缩进，确定使用tab 【偶尔有效】</li><li>好好看看sublime右下角，怎么是space啊喂！<img src="/2018/04/12/Error集锦/space.png">点击这里，变成tab，文档里的空格就自动变成tab了，你会看到有些小地方闪了一下，就是那些地方的空格让你出错/微笑。<img src="/2018/04/12/Error集锦/spaceToTab.png"><img src="/2018/04/12/Error集锦/tab.png"></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-缩进错误&quot;&gt;&lt;a href=&quot;#1-缩进错误&quot; class=&quot;headerlink&quot; title=&quot;1. 缩进错误&quot;&gt;&lt;/a&gt;1. 缩进错误&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;IndentationError: unindent does n
      
    
    </summary>
    
      <category term="小结" scheme="https://rosevil1874.github.io/categories/%E5%B0%8F%E7%BB%93/"/>
    
    
      <category term="Python" scheme="https://rosevil1874.github.io/tags/Python/"/>
    
      <category term="Error" scheme="https://rosevil1874.github.io/tags/Error/"/>
    
  </entry>
  
  <entry>
    <title>链表</title>
    <link href="https://rosevil1874.github.io/2018/04/12/%E9%93%BE%E8%A1%A8/"/>
    <id>https://rosevil1874.github.io/2018/04/12/链表/</id>
    <published>2018-04-12T01:44:18.000Z</published>
    <updated>2018-04-12T09:14:10.428Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、单链表"><a href="#一、单链表" class="headerlink" title="一、单链表"></a>一、单链表</h2><img src="/2018/04/12/链表/single_linked_list.png"><h3 id="1-结点类"><a href="#1-结点类" class="headerlink" title="1. 结点类"></a>1. 结点类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">self.val = n</span><br><span class="line">self.next = <span class="keyword">None</span></span><br></pre></td></tr></table></figure><h3 id="2-单链表类"><a href="#2-单链表类" class="headerlink" title="2. 单链表类"></a>2. 单链表类</h3><p>实现基本操作：</p><ol><li>初始化</li><li>判断是否为空</li><li>清空链表</li><li>取得链表长度</li><li>在链表末尾添加结点</li><li>在指定位置添加结点<img src="/2018/04/12/链表/insert_node.png"></li><li>删除指定位置的结点</li><li>替换指定位置结点值</li><li>查找指定值所在结点位置<br>注：[下标均以0开始]</li></ol><p>使用表头结点：<br>表头结点是链表的第一个结点，除了值被忽略以外和其它结点一致，但它不被当做链表中的实际元素。<br><strong>头结点的存在使得空链表与非空链表处理一致，也方便对链表的开始结点的插入或删除操作。</strong><br><img src="/2018/04/12/链表/head_pointer.jpg"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinLinkedList</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.head = ListNode(<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.length() == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 清空</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.head = ListNode(<span class="keyword">None</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 链表长度</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">length</span><span class="params">(self)</span>:</span></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        curr = self.head</span><br><span class="line">        <span class="keyword">while</span> curr.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            curr = curr.next</span><br><span class="line">        <span class="keyword">return</span> cnt</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 在链表末尾添加结点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        node = ListNode(val)</span><br><span class="line">        <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            self.head = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p = self.head</span><br><span class="line">            <span class="keyword">while</span> p.next:</span><br><span class="line">                p = p.next</span><br><span class="line">            p.next = node</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在指定位置添加结点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, idx, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.isEmpty():</span><br><span class="line">          print(<span class="string">'链表为空'</span>)</span><br><span class="line"></span><br><span class="line">        p = self.head</span><br><span class="line">        new = ListNode(value)</span><br><span class="line">        <span class="keyword">while</span> p <span class="keyword">and</span> idx &gt; <span class="number">0</span>:</span><br><span class="line">            p = p.next</span><br><span class="line">            idx -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 说明没有那么多结点</span></span><br><span class="line">        <span class="keyword">if</span> idx &gt; <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'超出链表长度'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            q = p.next</span><br><span class="line">            p.next = new</span><br><span class="line">            new.next = q</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除指定位置的结点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, idx)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.isEmpty():</span><br><span class="line">          print(<span class="string">'链表为空'</span>)</span><br><span class="line"></span><br><span class="line">        p = self.head</span><br><span class="line">        <span class="keyword">while</span> p <span class="keyword">and</span> idx &gt; <span class="number">0</span>:</span><br><span class="line">            p = p.next</span><br><span class="line">            idx -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 说明没有那么多结点</span></span><br><span class="line">        <span class="keyword">if</span> idx &gt; <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'超出链表长度'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p.next = p.next.next</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 替换指定位置结点值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replace</span><span class="params">(self, idx, newValue)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.isEmpty():</span><br><span class="line">          print(<span class="string">'链表为空'</span>)</span><br><span class="line"></span><br><span class="line">        p = self.head</span><br><span class="line">        new = ListNode(newValue)</span><br><span class="line">        <span class="keyword">while</span> p <span class="keyword">and</span> idx &gt; <span class="number">0</span>:</span><br><span class="line">            p = p.next</span><br><span class="line">            idx -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 说明没有那么多结点</span></span><br><span class="line">        <span class="keyword">if</span> idx &gt; <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'超出链表长度'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            q = p.next.next</span><br><span class="line">            p.next = new</span><br><span class="line">            new.next = q</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查找第idx个结点值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, idx)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.isEmpty():</span><br><span class="line">            print(<span class="string">'链表为空'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        p = self.head</span><br><span class="line">        <span class="keyword">while</span> p.next <span class="keyword">and</span> idx &gt; <span class="number">0</span>:</span><br><span class="line">            p = p.next</span><br><span class="line">            idx -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> idx &gt; <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'超出链表长度'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> p.val</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查找指定值所在结点位置</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.isEmpty():</span><br><span class="line">            print(<span class="string">'链表为空'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        p = self.head</span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> p.next <span class="keyword">and</span> <span class="keyword">not</span> p.val == value:</span><br><span class="line">            p = p.next</span><br><span class="line">            idx += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> idx - <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">l = SinLinkedList()</span><br><span class="line">l.append(<span class="number">12</span>)</span><br><span class="line">l.append(<span class="number">233</span>)</span><br><span class="line">l.insert(<span class="number">1</span>, <span class="number">666</span>)</span><br><span class="line">l.replace(<span class="number">1</span>, <span class="number">6666</span>)</span><br><span class="line">l.delete(<span class="number">1</span>)</span><br><span class="line">print(l.index(<span class="number">12</span>))</span><br><span class="line">print(l.search(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">h = l.head.next</span><br><span class="line"><span class="keyword">while</span> h:</span><br><span class="line">    print(h.val)</span><br><span class="line">    h = h.next</span><br></pre></td></tr></table></figure><h2 id="二、单向循环链表"><a href="#二、单向循环链表" class="headerlink" title="二、单向循环链表"></a>二、单向循环链表</h2><p>特点：从表中任意结点出发均可找到链表中其它结点，查找效率高。<br><img src="/2018/04/12/链表/linked_list.png"></p><p>判断是否存在环：</p><ol><li>多个结点的后继指针重复；</li><li>使用两个移动速度不同的指针，若相遇则存在环。</li></ol><h3 id="1-节点类-将结点属性设为私有变量"><a href="#1-节点类-将结点属性设为私有变量" class="headerlink" title="1. 节点类-将结点属性设为私有变量"></a>1. 节点类-将结点属性设为私有变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        self.__val = n</span><br><span class="line">        self.__next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getVal__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.__val</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setVal</span><span class="params">(self, newVal)</span>:</span></span><br><span class="line">    self.__val = newVal</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getNext</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.__next</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setNext</span><span class="params">(self, newNext)</span>:</span></span><br><span class="line">    self.__next = newNext</span><br></pre></td></tr></table></figure><h3 id="2-单向循环链表类"><a href="#2-单向循环链表类" class="headerlink" title="2.单向循环链表类"></a>2.单向循环链表类</h3><p>实现基本操作：</p><ol><li>初始化</li><li>判断是否为空</li><li>清空链表</li><li>取得链表长度</li><li>在头结点后插入结点：头插法</li><li>删除指定值的结点</li><li>替换指定结点值</li><li>查找指定结点并返回下标，不存在返回-1<img src="/2018/04/12/链表/single_cycle_linked_list.png"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinCycLinkedList</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">self.head = ListNode(<span class="keyword">None</span>)</span><br><span class="line">self.head.setNext(self.head)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self.head.getNext() == self.head</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空链表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line">self.head.setNext(self.head)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取得链表长度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">length</span><span class="params">(self)</span>:</span></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line">curr = self.head.getNext()</span><br><span class="line"><span class="keyword">while</span> curr != self.head:</span><br><span class="line">curr = curr.getNext()</span><br><span class="line">cnt += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> cnt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在头结点后插入结点：头插法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unshift</span><span class="params">(self, val)</span>:</span></span><br><span class="line">new = ListNode(val)</span><br><span class="line">new.setNext(self.head.getNext())</span><br><span class="line">self.head.setNext(new)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定值的结点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, val)</span>:</span></span><br><span class="line">prev = self.head</span><br><span class="line"><span class="keyword">while</span> prev.getNext() != self.head:</span><br><span class="line">curr = prev.getNext()</span><br><span class="line"><span class="keyword">if</span> curr.getVal() == val:</span><br><span class="line">prev.setNext( curr.getNext() )</span><br><span class="line">prev = prev.getNext()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换指定结点值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">raplce</span><span class="params">(self, val, newVal)</span>:</span></span><br><span class="line">prev = self.head</span><br><span class="line"><span class="keyword">while</span> prev.getNext() != self.head:</span><br><span class="line">curr = prev.getNext()</span><br><span class="line"><span class="keyword">if</span> curr.getVal() == val:</span><br><span class="line">curr.setVal(newVal)</span><br><span class="line">prev = prev.getNext()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找指定结点并返回下标，不存在返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, val)</span>:</span></span><br><span class="line">idx = <span class="number">0</span></span><br><span class="line">curr = self.head.getNext()</span><br><span class="line"><span class="keyword">while</span> curr != self.head:</span><br><span class="line"><span class="keyword">if</span> curr.getVal() == val:</span><br><span class="line"><span class="keyword">return</span> idx</span><br><span class="line">idx += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-测试-1"><a href="#3-测试-1" class="headerlink" title="3. 测试"></a>3. 测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">l = SinCycLinkedList()</span><br><span class="line">l.unshift(<span class="number">111</span>)</span><br><span class="line">l.unshift(<span class="number">222</span>)</span><br><span class="line">l.unshift(<span class="number">666</span>)</span><br><span class="line">l.raplce(<span class="number">111</span>, <span class="number">233</span>)</span><br><span class="line">l.delete(<span class="number">222</span>)</span><br><span class="line">print(<span class="string">'666 is in: '</span>, l.search(<span class="number">666</span>))</span><br><span class="line"><span class="comment"># l.clear()s</span></span><br><span class="line">print(<span class="string">'length: %d'</span> % l.length())</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\nitems:'</span>)</span><br><span class="line">h = l.head</span><br><span class="line"><span class="keyword">while</span> h.getNext() != l.head:</span><br><span class="line">print(h.getNext().getVal())</span><br><span class="line">h = h.getNext()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、单链表&quot;&gt;&lt;a href=&quot;#一、单链表&quot; class=&quot;headerlink&quot; title=&quot;一、单链表&quot;&gt;&lt;/a&gt;一、单链表&lt;/h2&gt;&lt;img src=&quot;/2018/04/12/链表/single_linked_list.png&quot;&gt;
&lt;h3 id=&quot;1-结
      
    
    </summary>
    
      <category term="数据结构+算法" scheme="https://rosevil1874.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="https://rosevil1874.github.io/tags/Python/"/>
    
      <category term="数据结构" scheme="https://rosevil1874.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="链表" scheme="https://rosevil1874.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>25 - 每k个一组翻转链表</title>
    <link href="https://rosevil1874.github.io/2018/04/11/25.%E6%AF%8Fk%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>https://rosevil1874.github.io/2018/04/11/25.每k个一组翻转链表/</id>
    <published>2018-04-11T09:09:34.000Z</published>
    <updated>2018-04-11T10:30:06.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><img src="/2018/04/11/25.每k个一组翻转链表/25.png"><a id="more"></a><blockquote><p>审题：<br>仔细审题说三遍啊，看到这个题目才想起来24题我的第一个蠢蠢的方法不止蠢还不符合题目要求orz<br><strong>你不应该改变节点的值，只有节点位置本身可能会改变</strong></p></blockquote><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol><li>首先要知道如何反转链表；</li><li>按结点数确定分组；</li><li>对确定的分组使用尾插法逆置，然后设置新的起点；</li><li>若最后没有k个结点直接跳过。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseKGroup</span><span class="params">(self, head, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        pre = tail = ListNode(<span class="number">-1</span>)</span><br><span class="line">        q = head</span><br><span class="line">        <span class="keyword">while</span> q <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="comment"># 向后查找k个结点</span></span><br><span class="line">            n = k</span><br><span class="line">            p = q</span><br><span class="line">            <span class="keyword">while</span> p <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> n &gt; <span class="number">0</span>:</span><br><span class="line">                p = p.next</span><br><span class="line">                n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 若在查找到k个结点过程中遇到None，说明后面不足k个</span></span><br><span class="line">            <span class="keyword">if</span> n &gt; <span class="number">0</span>:</span><br><span class="line">                tail.next = q</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将这k个结点逆置</span></span><br><span class="line">            end = q</span><br><span class="line">            <span class="keyword">while</span> q != p:</span><br><span class="line">                t = q.next</span><br><span class="line">                q.next = tail.next</span><br><span class="line">                tail.next = q</span><br><span class="line">                q = t</span><br><span class="line">            tail = end</span><br><span class="line">        <span class="keyword">return</span> pre.next</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;img src=&quot;/2018/04/11/25.每k个一组翻转链表/25.png&quot;&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/tags/LeetCode/"/>
    
      <category term="Python" scheme="https://rosevil1874.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>24 - 交换相邻结点</title>
    <link href="https://rosevil1874.github.io/2018/04/11/24.%E4%BA%A4%E6%8D%A2%E7%9B%B8%E9%82%BB%E7%BB%93%E7%82%B9/"/>
    <id>https://rosevil1874.github.io/2018/04/11/24.交换相邻结点/</id>
    <published>2018-04-11T06:25:14.000Z</published>
    <updated>2018-04-11T09:05:36.771Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><img src="/2018/04/11/24.交换相邻结点/24.png"><a id="more"></a><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><ol><li>将链表遍历一遍取出value值；</li><li>按相邻节点（奇偶下标）交换的顺序连接起来。<br>虽然方法很蠢，但是过了哈哈哈哈<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        lists = []</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            lists.append(head.val)</span><br><span class="line">            head = head.next</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range( <span class="number">0</span>, len(lists), <span class="number">2</span> ):</span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; len(lists):</span><br><span class="line">                lists[i], lists[i+<span class="number">1</span>] = lists[i+<span class="number">1</span>], lists[i]</span><br><span class="line">        </span><br><span class="line">        h = ListNode(<span class="number">0</span>)</span><br><span class="line">        node = h</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lists)):</span><br><span class="line">            node.next = ListNode(lists[i])</span><br><span class="line">            node = node.next</span><br><span class="line">        <span class="keyword">return</span> h.next</span><br><span class="line">            </span><br><span class="line">head = ListNode(<span class="number">1</span>)</span><br><span class="line">node = head</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    node.next = ListNode(i+<span class="number">2</span>)</span><br><span class="line">    node = node.next</span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">r = s.swapPairs(head)</span><br><span class="line"><span class="keyword">while</span> r:</span><br><span class="line">    print(r.val)</span><br><span class="line">    r = r.next</span><br></pre></td></tr></table></figure></li></ol><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><ol><li>加个dummy结点指向头结点；</li><li>每隔一个结点原地交换一下；<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        lists = []</span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        prev = dummy</span><br><span class="line">        cur = head</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">and</span> cur.next:</span><br><span class="line">            prev.next = cur.next</span><br><span class="line">            cur.next = cur.next.next</span><br><span class="line">            prev.next.next = cur</span><br><span class="line">            prev = cur</span><br><span class="line">            cur = cur.next</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure></li></ol><h2 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h2><p>递归~~~还不太懂<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="keyword">None</span> <span class="keyword">or</span> head.next == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        tmp = head.next</span><br><span class="line">        head.next = swapPairs(tmp.next)</span><br><span class="line">        tmp.next = head</span><br><span class="line">        <span class="keyword">return</span> tmp</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;img src=&quot;/2018/04/11/24.交换相邻结点/24.png&quot;&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/tags/LeetCode/"/>
    
      <category term="Python" scheme="https://rosevil1874.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>23 - 合并K个元素的有序链表</title>
    <link href="https://rosevil1874.github.io/2018/04/11/23.%E5%90%88%E5%B9%B6K%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <id>https://rosevil1874.github.io/2018/04/11/23.合并K个元素的有序链表/</id>
    <published>2018-04-11T02:40:25.000Z</published>
    <updated>2018-04-11T06:15:39.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><img src="/2018/04/11/23.合并K个元素的有序链表/23.png"><a id="more"></a><blockquote><p>审题：<br>首先吧，这个题目我就没看懂，合并有序链表并返回有序链表，excuse me？？<br>然后吧，看了一下输入输出type，索德斯呢~~ k个链表都是有序的，合并成一个/摊手<br>最后吧，想起来之前做过一个合并俩有序链表的,<a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/description/" target="_blank" rel="noopener">传送门</a>。当时最简洁的方法是使用了递归，现在是K个链表的话，一个个连铁定超时没得跑的。<br>怎么办呢，偷偷瞟一眼相关话题，有<strong>堆</strong>和<strong>分治算法</strong>。哎，第一反应就是把算法书翻出来再学一遍，虽然前面已经几乎两遍了，算法助教说的果然没错，这本书是值得花时间的。</p></blockquote><h2 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h2><ol><li>对半划分直到只有一个或两个链表；</li><li>使用合并两个有序链表的方法合并。<br>以4链表为例：<br> 1、3合并，合并结果放到1的位置；<br> 2、4合并，合并结果放到2的位置；<br> 再把1、2合并（相当于原来的13 和 24合并）。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type lists: List[ListNode]</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        l = len(lists)</span><br><span class="line">        <span class="keyword">if</span> l == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> l &gt; <span class="number">1</span>:</span><br><span class="line">            k = (l + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(l // <span class="number">2</span>):</span><br><span class="line">                lists[i] = mergeTwoLists(lists[i], lists[i + k])</span><br><span class="line">            l = k</span><br><span class="line">        <span class="keyword">return</span> lists[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1, l2)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1:</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> l2:</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">                l1.next = self.mergeTwoLists(l1.next, l2)</span><br><span class="line">                <span class="keyword">return</span> l1</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l2.next = self.mergeTwoLists(l1, l2.next)</span><br><span class="line">                <span class="keyword">return</span> l2</span><br></pre></td></tr></table></figure></li></ol><p>递归深度超限了orz,Python中默认的最大递归深度是989，当尝试递归第990时便出现递归深度超限的错误:<br><img src="/2018/04/11/23.合并K个元素的有序链表/error.png"></p><p>虽然可以手动设置递归调用深度：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">10000000</span>)</span><br></pre></td></tr></table></figure></p><p>但是我不要，我！不！要!/傲娇脸<br>应该是合并两个链表也是递归，所以就好多好多递归所以超了吧。<br>把合并两个数组改一下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1, l2)</span>:</span></span><br><span class="line">        head = ListNode(<span class="number">0</span>)</span><br><span class="line">        res = head</span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">                res.next = l1</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.next = l2</span><br><span class="line">                l2 = l2.next</span><br><span class="line">            res = res.next</span><br><span class="line">        <span class="keyword">if</span> l1:</span><br><span class="line">            res.next = l1</span><br><span class="line">        <span class="keyword">elif</span> l2:</span><br><span class="line">            res.next = l2</span><br><span class="line">        <span class="keyword">return</span> head.next</span><br></pre></td></tr></table></figure></p><p>果然通过了哗哈哈哈哈哈哈哈哈哈哈哈✧*｡٩(ˊᗜˋ<em>)و✧</em>｡</p><h2 id="最小堆"><a href="#最小堆" class="headerlink" title="最小堆"></a>最小堆</h2><ol><li>把k个链表的首元素加入最小堆中，使其升序排列；</li><li>每次取出堆顶元素（最小）加入结果链表，然后将其后那个元素加入最小堆；</li><li>直到把堆取空了，结果链表就合并完成了。</li></ol><p>but…python没有实现堆这样的数据结构呀，计几构建吧。哈哈哈，下次吧嘻嘻<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;img src=&quot;/2018/04/11/23.合并K个元素的有序链表/23.png&quot;&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/tags/LeetCode/"/>
    
      <category term="Python" scheme="https://rosevil1874.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>22 - 括号生成</title>
    <link href="https://rosevil1874.github.io/2018/04/11/22.%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/"/>
    <id>https://rosevil1874.github.io/2018/04/11/22.括号生成/</id>
    <published>2018-04-11T01:24:57.000Z</published>
    <updated>2018-04-11T02:47:46.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><img src="/2018/04/11/22.括号生成/22.png"><a id="more"></a><blockquote><p>审题：<br>看到括号生成不自觉会想到括号匹配的检查，在生成过程中也要注意匹配规范。</p></blockquote><h2 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h2><p>cr:<a href="https://blog.csdn.net/zjc_game_coder/article/details/78520742" target="_blank" rel="noopener">leetcode-22-生成括号</a></p><blockquote><p>定义：<br>回溯法是一个<strong>类似枚举的搜索尝试过程</strong>，主要是在搜索过程中寻找问题的解，当发现不满足求解条件时，就<strong>回溯</strong>返回，尝试别的路径。</p><p>回溯与递归：<br>回溯指的是一种<strong>此路不通，绕道迂回</strong>的算法思想，递归是代码层次上的一种组织结构。</p></blockquote><p>回到此题中来，下图可以说是非常直观了。这个选择过程就是一种树结构。最开始的时候肯定只能选 (，因此，分析是从 ( 开始的。<br><img src="/2018/04/11/22.括号生成/backtracking.png"></p><p><strong>私以为以下代码可以说是超级棒了</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateParenthesis</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: List[str]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        </span><br><span class="line">        res = []</span><br><span class="line">        self.helper( <span class="string">''</span>, res, n, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, curr, res, n, left, right)</span>:</span></span><br><span class="line">    <span class="comment"># 当 右括号 = n 时已经找到一个结果</span></span><br><span class="line">    <span class="keyword">if</span> right == n:</span><br><span class="line">    res.append(curr)</span><br><span class="line">    <span class="keyword">if</span> left &lt; n:</span><br><span class="line">    self.helper(curr+<span class="string">'('</span>,res, n, left+<span class="number">1</span>, right)</span><br><span class="line">    <span class="keyword">if</span> left &gt; right:</span><br><span class="line">    self.helper(curr+<span class="string">')'</span>,res, n, left, right+<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;img src=&quot;/2018/04/11/22.括号生成/22.png&quot;&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/tags/LeetCode/"/>
    
      <category term="Python" scheme="https://rosevil1874.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>16 - 最接近的三数之和</title>
    <link href="https://rosevil1874.github.io/2018/04/10/16.%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>https://rosevil1874.github.io/2018/04/10/16.最接近的三数之和/</id>
    <published>2018-04-10T10:43:06.000Z</published>
    <updated>2018-04-11T01:29:08.191Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><img src="/2018/04/10/16.最接近的三数之和/16.png"><a id="more"></a><blockquote><p>审题：<br>看到题目的我，悄悄点开了旁边的相关话题，恩又有双指针，大概知道怎么做了hiahia＼＼\٩(‘ω’)و//／／<br><a href="https://rosevil1874.github.io/2018/04/05/1.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#more">三数之和-传送门</a></p></blockquote><h2 id="方法-类似三数之和"><a href="#方法-类似三数之和" class="headerlink" title="方法[类似三数之和]"></a>方法[类似三数之和]</h2><ol><li>将数组排序；</li><li>第一层循环遍历元素；</li><li>第二层循环使用双指针向中间靠拢检查；</li><li>遇到更符合条件的更新结果。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSumClosest</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        closest = nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            j, k = i + <span class="number">1</span>, len(nums) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> j &lt; k:</span><br><span class="line">                value = nums[i] + nums[j] + nums[k]</span><br><span class="line">                closest = value <span class="keyword">if</span> abs(target - value) &lt; abs(target - closest) <span class="keyword">else</span> closest</span><br><span class="line">                <span class="keyword">if</span> value == target:</span><br><span class="line">                    <span class="keyword">return</span> target</span><br><span class="line">                <span class="keyword">elif</span> value &gt; target:</span><br><span class="line">                    k -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> closest</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;img src=&quot;/2018/04/10/16.最接近的三数之和/16.png&quot;&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/tags/LeetCode/"/>
    
      <category term="Python" scheme="https://rosevil1874.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>15 - 三数之和</title>
    <link href="https://rosevil1874.github.io/2018/04/10/15.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>https://rosevil1874.github.io/2018/04/10/15.三数之和/</id>
    <published>2018-04-10T04:32:58.000Z</published>
    <updated>2018-04-10T10:42:00.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><img src="/2018/04/10/15.三数之和/15.png"><a id="more"></a><blockquote><p>审题：这个这个，似曾相识呀，诶不就是第一题两数之和嘛<br><a href="https://rosevil1874.github.io/2018/04/05/1.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#more">两数之和-传送门</a><br>So，可不可以把“三数之和”问题改成“两数之和+X”捏。。。</p></blockquote><h2 id="方法一：利用“两数之和”"><a href="#方法一：利用“两数之和”" class="headerlink" title="方法一：利用“两数之和”"></a>方法一：利用“两数之和”</h2><ol><li>计算将列表中每个数与几（target）相加的和为零；</li><li>分别使用这个target作为两数之和问题中的target；</li><li>去重之后将符合条件的结果加入返回数组。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSum</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        l = len(nums)</span><br><span class="line">        ret = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(l):</span><br><span class="line">            target = <span class="number">0</span> - nums[j]</span><br><span class="line">            tmp = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> i, a <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">                <span class="keyword">if</span> i == j:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> target-a <span class="keyword">in</span> tmp:</span><br><span class="line">                    re = sorted( [nums[j], nums[tmp[target-a]], nums[i]] ) </span><br><span class="line">                    <span class="keyword">if</span> re <span class="keyword">not</span> <span class="keyword">in</span> ret:</span><br><span class="line">                        ret.append( re )</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    tmp[a] = i</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure></li></ol><p>超时啦啊啊啊啊啊(눈‸눈)<br><img src="/2018/04/10/15.三数之和/overtime.png"></p><h2 id="方法二：双指针"><a href="#方法二：双指针" class="headerlink" title="方法二：双指针"></a>方法二：双指针</h2><ol><li>将数组排序；</li><li>第一层循环遍历元素到倒数第三个；</li><li>第二层循环使用双指针向中间靠拢检查；</li><li>符合条件且不重复的加入结果数组。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def threeSum(self, nums):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type nums: List[int]</span><br><span class="line">        :rtype: List[List[int]]</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        l = len(nums)</span><br><span class="line">        nums.sort()</span><br><span class="line">        ret = []</span><br><span class="line"></span><br><span class="line">        for i in range(l - 2):</span><br><span class="line">            # 去重</span><br><span class="line">            if i &gt; 0 and nums[i] == nums[i-1]:</span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line">            # 双指针归位！</span><br><span class="line">            j, k = i + 1, l - 1</span><br><span class="line">            while j &lt; k:</span><br><span class="line">                if nums[i] + nums[j] + nums[k] == 0:</span><br><span class="line">                    ret.append( [nums[i], nums[j], nums[k]] )</span><br><span class="line">                    j += 1</span><br><span class="line">                    k -= 1</span><br><span class="line"></span><br><span class="line">                    # 去重</span><br><span class="line">                    while j &lt; k and nums[j] == nums[j-1] :</span><br><span class="line">                        j += 1</span><br><span class="line">                    while j &lt; k and nums[k] == nums[k+1] :</span><br><span class="line">                        k -= 1</span><br><span class="line">                elif nums[i] + nums[j] + nums[k] &lt; 0:</span><br><span class="line">                    j += 1</span><br><span class="line">                else:</span><br><span class="line">                    k -= 1</span><br><span class="line"></span><br><span class="line">        return ret</span><br></pre></td></tr></table></figure><p>还是超时，黑人问号.jpg<br><img src="/2018/04/10/15.三数之和/黑人问号.jpg"></p><p>问题出在哪里，，，我把l = len(nums)去掉了，所有需要用到l的地方直接使用len(nums)就AC了，excuse me？？？把它暂存起来不是更快吗？？？看看这个卡住的测试用例吧：<br><img src="/2018/04/10/15.三数之和/overtime2.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;img src=&quot;/2018/04/10/15.三数之和/15.png&quot;&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/tags/LeetCode/"/>
    
      <category term="Python" scheme="https://rosevil1874.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>&#39;LeetCode小记&#39;</title>
    <link href="https://rosevil1874.github.io/2018/04/10/LeetCode%E5%B0%8F%E8%AE%B0/"/>
    <id>https://rosevil1874.github.io/2018/04/10/LeetCode小记/</id>
    <published>2018-04-10T02:33:58.000Z</published>
    <updated>2018-04-12T01:06:25.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="没咋弄懂的"><a href="#没咋弄懂的" class="headerlink" title="没咋弄懂的"></a>没咋弄懂的</h2><ol><li>两个排序数组的中位数 → <a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/description/" target="_blank" rel="noopener">戳</a></li><li>最长回文子串 → <a href="https://leetcode-cn.com/problems/longest-palindromic-substring/description/" target="_blank" rel="noopener">戳</a></li><li>正则表达式匹配 → <a href="https://leetcode-cn.com/problems/regular-expression-matching/description/" target="_blank" rel="noopener">戳</a></li><li>整数转罗马数字 → <a href="https://leetcode-cn.com/problems/integer-to-roman/description/" target="_blank" rel="noopener">戳</a></li><li>罗马数字转整数 → <a href="https://leetcode-cn.com/problems/roman-to-integer/description/" target="_blank" rel="noopener">戳</a></li><li>三数之和 → <a href="https://rosevil1874.github.io/2018/04/05/1.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#more">三数之和-传送门</a></li><li>合并K个元素的有序链表 → <a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/description/" target="_blank" rel="noopener">戳</a></li><li>交换相邻结点 → <a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/description/" target="_blank" rel="noopener">戳</a></li><li><a href="https://rosevil1874.github.io/2018/04/05/25.每k个一组翻转链表/#more">aaa</a></li></ol><h2 id="一些小技巧"><a href="#一些小技巧" class="headerlink" title="一些小技巧"></a>一些小技巧</h2><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><ol><li>双指针</li><li>尾插法</li><li>段遍历</li></ol><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;没咋弄懂的&quot;&gt;&lt;a href=&quot;#没咋弄懂的&quot; class=&quot;headerlink&quot; title=&quot;没咋弄懂的&quot;&gt;&lt;/a&gt;没咋弄懂的&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;两个排序数组的中位数 → &lt;a href=&quot;https://leetcode-cn.com/proble
      
    
    </summary>
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>14 - 最长公共前缀</title>
    <link href="https://rosevil1874.github.io/2018/04/10/14.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/"/>
    <id>https://rosevil1874.github.io/2018/04/10/14.最长公共前缀/</id>
    <published>2018-04-10T02:31:18.000Z</published>
    <updated>2018-04-10T03:09:20.758Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><img src="/2018/04/10/14.最长公共前缀/14.png"><a id="more"></a><blockquote><p>审题：多么简单粗暴的题目啊</p></blockquote><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>思路：</p><ol><li>找出最短的字符串，以其为基准；</li><li>遍历最短字符串的每个字符，同时检查其他每个字符串的当前位置字符；</li><li>若不相等，返回最长前缀；</li><li>若相等，最长前缀更新：加上当前字符。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type strs: List[str]</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        strs_l = len(strs)</span><br><span class="line">        <span class="keyword">if</span> strs_l == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line">        pre = <span class="string">''</span></span><br><span class="line">        min_l = len(strs[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, strs_l):</span><br><span class="line">            min_l = min(min_l, len(strs[i]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(min_l):</span><br><span class="line">            x = strs[<span class="number">0</span>][i]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(strs_l):</span><br><span class="line">                <span class="keyword">if</span> strs[j][i] != x :</span><br><span class="line">                    <span class="keyword">return</span> pre</span><br><span class="line">            pre += x</span><br><span class="line">        <span class="keyword">return</span> pre</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;img src=&quot;/2018/04/10/14.最长公共前缀/14.png&quot;&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/tags/LeetCode/"/>
    
      <category term="Python" scheme="https://rosevil1874.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>11 - 盛最多水的容器</title>
    <link href="https://rosevil1874.github.io/2018/04/10/11.%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <id>https://rosevil1874.github.io/2018/04/10/11.盛最多水的容器/</id>
    <published>2018-04-10T01:51:39.000Z</published>
    <updated>2018-04-10T02:29:17.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><img src="/2018/04/10/11.盛最多水的容器/11.png"><a id="more"></a><blockquote><p>审题：这个题目从字面意思上理解还是不太直观的，在纸上画画图就一目了然了。懒得慢慢画个好看的图，去人家的文章里找找，找到啦，还是个动图啊厉害厉害，不过这个图直接泄露了解题方法啊~~</p></blockquote><img src="/2018/04/10/11.盛最多水的容器/maxArea.gif"><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>思路【这个和CCF有一题‘最大的矩形’异曲同工啊】：</p><ol><li>要装最多水，就要矩形面积最大；</li><li>以短边作为计算高度，木桶效应嘛( ･´ω`･ )；</li><li>从最大宽度开始，即双指针从两端向中间遍历；</li><li>每次更新最大面积，指针相遇时返回结果。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span><span class="params">(self, height)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type height: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        l = len(height)</span><br><span class="line">        maxArea = <span class="number">0</span></span><br><span class="line">        area = <span class="number">0</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = l - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            <span class="keyword">if</span> height[i] &lt; height[j]:</span><br><span class="line">                h = height[i]</span><br><span class="line">                area = (j - i) * h</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                h = height[j]</span><br><span class="line">                area = (j - i) * h</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            maxArea = max(maxArea, area)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> maxArea</span><br></pre></td></tr></table></figure><h2 id="新技能get"><a href="#新技能get" class="headerlink" title="新技能get"></a>新技能get</h2><p>没有思路的时候，可以悄悄点开这个相关话题，下面列出来的点一般就是解题方法啊哈哈哈，我可真聪明(〃ﾉωﾉ)</p><img src="/2018/04/10/11.盛最多水的容器/idea.png">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;img src=&quot;/2018/04/10/11.盛最多水的容器/11.png&quot;&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/tags/LeetCode/"/>
    
      <category term="Python" scheme="https://rosevil1874.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>10 - 正则表达式匹配</title>
    <link href="https://rosevil1874.github.io/2018/04/09/10.%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
    <id>https://rosevil1874.github.io/2018/04/09/10.正则表达式匹配/</id>
    <published>2018-04-09T05:44:56.000Z</published>
    <updated>2018-04-10T01:50:02.843Z</updated>
    
    <content type="html"><![CDATA[<p><strong>此题有待深究 哦哦哦</strong></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><a id="more"></a><p>自己的思路：</p><ol><li>由于*控制的是其前面字符的匹配，因此可以由正则表达式的末尾开始检查；</li><li>没了。。没了。。。直接用字符串的方法肯定是不行的，越想越复杂。。</li></ol><p>↓↓别人的思路</p><blockquote class="blockquote-center">If you are stuck, recursion is your friend.</blockquote><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><blockquote><p>cr:<a href="http://www.cnblogs.com/grandyang/p/4461713.html" target="_blank" rel="noopener">[LeetCode] Regular Expression Matching 正则表达式匹配</a></p></blockquote><p><strong>这个代码还没调通，递归调用函数出错，作用域问题</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def isMatch(self, s, p):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type s: str</span><br><span class="line">        :type p: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        s_len = len(s)</span><br><span class="line">        p_len = len(p)</span><br><span class="line">        if s_len == 0 and p_len == 0:</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line">        if s_len == 1 and p_len == 1:</span><br><span class="line">            if s[0] == p[0] or p[0] == &apos;.&apos;:</span><br><span class="line">                return True</span><br><span class="line">            else:</span><br><span class="line">                return False</span><br><span class="line"></span><br><span class="line">        if p[1] != &apos;*&apos;:</span><br><span class="line">            if s_len == 0:</span><br><span class="line">                return False</span><br><span class="line">            if s[0] == p[0] or p[0] == &apos;.&apos;:</span><br><span class="line">                return isMatch(self, s[1:], p[1:])</span><br><span class="line">            else:</span><br><span class="line">                return False</span><br><span class="line"></span><br><span class="line">        while len(s) and (s[0] == p[0] or p[0] == &apos;.&apos;):</span><br><span class="line">            if isMatch(self, s, p[2:]):</span><br><span class="line">                return True        </span><br><span class="line">            s = s[1:]</span><br><span class="line">        return isMatch(self, s, p[2:])</span><br></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><blockquote><p>cr:<a href="https://blog.csdn.net/wangyaninglm/article/details/55827721" target="_blank" rel="noopener">leetcode 10 Regular Expression Matching</a></p></blockquote><p>This problem has a typical solution using Dynamic Programming. We define the state P[i][j] to be true if s[0..i) matches p[0..j) and false otherwise. Then the state equations are:<br>a. P[i][j] = P[i - 1][j - 1], if p[j - 1] != ‘<em>’ &amp;&amp; (s[i - 1] == p[j - 1] || p[j - 1] == ‘.’);<br>b. P[i][j] = P[i][j - 2], if p[j - 1] == ‘</em>’ and the pattern repeats for 0 times;<br>c. P[i][j] = P[i - 1][j] &amp;&amp; (s[i - 1] == p[j - 2] || p[j - 2] == ‘.’), if p[j - 1] == ‘*’ and the pattern repeats for at least 1 times.<br>Putting these together, we will have the following code.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s, p)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type p: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        s_len = len(s)</span><br><span class="line">        p_len = len(p)</span><br><span class="line">        dp = [[<span class="keyword">True</span>] + [<span class="keyword">False</span>] * s_len]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(p_len):</span><br><span class="line">            dp.append([<span class="keyword">False</span>]*(s_len+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, p_len + <span class="number">1</span>):</span><br><span class="line">            x = p[i<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">if</span> x == <span class="string">'*'</span> <span class="keyword">and</span> i &gt; <span class="number">1</span>:</span><br><span class="line">                dp[i][<span class="number">0</span>] = dp[i<span class="number">-2</span>][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, s_len+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> x == <span class="string">'*'</span>:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-2</span>][j] <span class="keyword">or</span> dp[i<span class="number">-1</span>][j] <span class="keyword">or</span> (dp[i<span class="number">-1</span>][j<span class="number">-1</span>] <span class="keyword">and</span> p[i<span class="number">-2</span>] == s[j<span class="number">-1</span>]) <span class="keyword">or</span> (dp[i][j<span class="number">-1</span>] <span class="keyword">and</span> p[i<span class="number">-2</span>]==<span class="string">'.'</span>)</span><br><span class="line">                <span class="keyword">elif</span> x == <span class="string">'.'</span> <span class="keyword">or</span> x == s[j<span class="number">-1</span>]:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[p_len][s_len]</span><br></pre></td></tr></table></figure><h2 id="使用第三方库re"><a href="#使用第三方库re" class="headerlink" title="使用第三方库re"></a>使用第三方库re</h2><p>一行代码/微笑脸<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s, p)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> re.match(<span class="string">'^'</span> + p + <span class="string">'$'</span>, s) != <span class="keyword">None</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;此题有待深究 哦哦哦&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/tags/LeetCode/"/>
    
      <category term="Python" scheme="https://rosevil1874.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>8 - 字符串转整数</title>
    <link href="https://rosevil1874.github.io/2018/04/09/8.%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B4%E6%95%B0/"/>
    <id>https://rosevil1874.github.io/2018/04/09/8.字符串转整数/</id>
    <published>2018-04-09T02:57:25.000Z</published>
    <updated>2018-04-09T05:55:17.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><img src="/2018/04/09/8.字符串转整数/8.png"><a id="more"></a><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><blockquote><p>嗯要注意的地方题目上已经说得非常明白了，一个一个care就好啦。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type str: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        l = len(str)</span><br><span class="line">        ret = <span class="number">0</span></span><br><span class="line">        is_valid = <span class="keyword">False</span>    <span class="comment"># 是否无效，</span></span><br><span class="line">        flag = <span class="number">1</span>            <span class="comment"># 1：正数，-1：负数</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> l == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &lt; l <span class="keyword">and</span> str[i] == <span class="string">' '</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> str[i] == <span class="string">'+'</span> <span class="keyword">or</span> str[i] == <span class="string">'-'</span>:</span><br><span class="line">            flag = <span class="number">1</span> <span class="keyword">if</span> str[i] == <span class="string">'+'</span> <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &lt; l:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'0'</span> &lt;= str[i] &lt;= <span class="string">'9'</span>:</span><br><span class="line">                is_valid = <span class="keyword">True</span></span><br><span class="line">                ret = ret * <span class="number">10</span> + int(str[i])</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查是否有效、是否负数</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_valid:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> flag == <span class="number">-1</span>:</span><br><span class="line">            ret = -ret</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查是否溢出</span></span><br><span class="line">        <span class="keyword">if</span> ret &gt; <span class="number">2147483647</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2147483647</span></span><br><span class="line">        <span class="keyword">elif</span> ret &lt; <span class="number">-2147483648</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-2147483648</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;img src=&quot;/2018/04/09/8.字符串转整数/8.png&quot;&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/tags/LeetCode/"/>
    
      <category term="Python" scheme="https://rosevil1874.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>7 - 颠倒整数</title>
    <link href="https://rosevil1874.github.io/2018/04/09/7.%E9%A2%A0%E5%80%92%E6%95%B4%E6%95%B0/"/>
    <id>https://rosevil1874.github.io/2018/04/09/7.颠倒整数/</id>
    <published>2018-04-09T02:23:23.000Z</published>
    <updated>2018-04-09T05:53:26.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><img src="/2018/04/09/7.颠倒整数/7.png"><a id="more"></a><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><blockquote><p>看到题目，想到三个要注意的点：</p><ol><li>负数的处理；</li><li>原数末尾为零时颠倒后要去掉；</li><li>如何检查32位整数的溢出。</li></ol></blockquote><p>解决：</p><ol><li>给负数立个flag（没错就是立flag哈哈），然后绝对值化再处理，最后返回时给原本是负号的再负一下就行了；</li><li>判断判断就行，末尾有零的给他去掉；</li><li>笨方法就是直接判断有没有超过32位整数范围（-2147483648 ~ 2147483647），但是暂时还没想到不笨的方法（python的弱类型啊啊啊）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">-10</span> &lt; x &lt; <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 1.判断是否为负数</span></span><br><span class="line">        flag = <span class="keyword">False</span>  </span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">            x = -x</span><br><span class="line">            flag = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 转化为字符串翻转</span></span><br><span class="line">        x = str(x)[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 去掉多余的零</span></span><br><span class="line">        <span class="keyword">while</span> x[<span class="number">0</span>] == <span class="string">'0'</span>:</span><br><span class="line">            x = x[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. 转化为整数并判断溢出</span></span><br><span class="line">        x = int(x)</span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            x = -x</span><br><span class="line">        <span class="keyword">if</span> <span class="number">-2147483648</span> &lt; x &lt; <span class="number">2147483647</span>:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>一开始忽略了只有一位的情况，这种情况直接返回就好~~</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;img src=&quot;/2018/04/09/7.颠倒整数/7.png&quot;&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/tags/LeetCode/"/>
    
      <category term="Python" scheme="https://rosevil1874.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>6 - Z字形转换</title>
    <link href="https://rosevil1874.github.io/2018/04/09/6.Z%E5%AD%97%E5%BD%A2%E8%BD%AC%E6%8D%A2/"/>
    <id>https://rosevil1874.github.io/2018/04/09/6.Z字形转换/</id>
    <published>2018-04-09T01:48:51.000Z</published>
    <updated>2018-04-09T05:53:21.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><img src="/2018/04/09/6.Z字形转换/6.png"><a id="more"></a><p>看到题目的时候一脸懵逼，这啥呀，啥Z字形啊咋排的呀，怪不得这么多人给了unlike嚯嚯嚯。。。</p><img src="/2018/04/09/6.Z字形转换/down.png"><p>事实证明，只有行数多了才能看出这个z，下图是直接用下标排的，一共5行。</p><img src="/2018/04/09/6.Z字形转换/Z字形.png"><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><ol><li>一共N行时，total = 2*(N-1)个字符组成一个完整序列，即Z字的前两划；</li><li>每total个字符为一组，计算这一组中每个字符在第几行；</li><li>从第一行开始，把每一行的字符拼接起来返回。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(self, s, numRows)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type numRows: int</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> numRows == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">        l = len(s)</span><br><span class="line">        total = <span class="number">2</span> * (numRows - <span class="number">1</span>)</span><br><span class="line">        tmp = []</span><br><span class="line">        ret = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(numRows):</span><br><span class="line">        tmp.append(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(l):</span><br><span class="line">        idx = i % total</span><br><span class="line">        <span class="keyword">if</span> idx &gt;= numRows:</span><br><span class="line">        idx = total - idx</span><br><span class="line">        tmp[idx] += s[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(numRows):</span><br><span class="line">        ret += tmp[j]</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><p>自测是没有问题的，提交了三次都提交不上去，我也只好unlike了( ･´ω`･ )<br>恩恩好了好了AC了嚯嚯嚯</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;img src=&quot;/2018/04/09/6.Z字形转换/6.png&quot;&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/tags/LeetCode/"/>
    
      <category term="Python" scheme="https://rosevil1874.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>5 - 最长回文子串</title>
    <link href="https://rosevil1874.github.io/2018/04/08/5.%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <id>https://rosevil1874.github.io/2018/04/08/5.最长回文子串/</id>
    <published>2018-04-08T05:27:31.000Z</published>
    <updated>2018-04-09T05:52:57.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><img src="/2018/04/08/5.最长回文子串/5.png"><a id="more"></a><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>思路：</p><ol><li>分别以每个元素为中心，找出偶数长度的最长回文子串和奇数长度的最长回文子串</li><li>取奇偶中最长的一个</li><li>取所有元素为中心的最长的一个<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        l = len(s)</span><br><span class="line">        <span class="keyword">if</span> l &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">        max_len = <span class="number">0</span></span><br><span class="line">        max_s = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, l):</span><br><span class="line">            low = i - <span class="number">1</span></span><br><span class="line">            high = i</span><br><span class="line">            <span class="keyword">while</span> low&gt;=<span class="number">0</span> <span class="keyword">and</span> high&lt;l <span class="keyword">and</span> s[low]==s[high]:</span><br><span class="line">                low -= <span class="number">1</span></span><br><span class="line">                high += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> high-low+<span class="number">1</span> &gt; max_len:</span><br><span class="line">                max_len = high-low+<span class="number">1</span></span><br><span class="line">                max_s = s[low+<span class="number">1</span> : high]</span><br><span class="line"></span><br><span class="line">            low = i - <span class="number">1</span></span><br><span class="line">            high = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> low&gt;=<span class="number">0</span> <span class="keyword">and</span> high&lt;l <span class="keyword">and</span> s[low]==s[high]:</span><br><span class="line">                low -= <span class="number">1</span></span><br><span class="line">                high += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> high-low+<span class="number">1</span> &gt; max_len:</span><br><span class="line">                max_len = high-low+<span class="number">1</span></span><br><span class="line">                max_s = s[low+<span class="number">1</span> : high]</span><br><span class="line">        <span class="keyword">return</span> max_s</span><br></pre></td></tr></table></figure></li></ol><h2 id="方法二：Manacher算法"><a href="#方法二：Manacher算法" class="headerlink" title="方法二：Manacher算法"></a>方法二：Manacher算法</h2><p><strong>中期答辩精力有限，下次吧</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;img src=&quot;/2018/04/08/5.最长回文子串/5.png&quot;&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/tags/LeetCode/"/>
    
      <category term="Python" scheme="https://rosevil1874.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>4 - 两个排序数组的中位数</title>
    <link href="https://rosevil1874.github.io/2018/04/08/4.%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    <id>https://rosevil1874.github.io/2018/04/08/4.两个排序数组的中位数/</id>
    <published>2018-04-08T02:21:26.000Z</published>
    <updated>2018-04-09T05:53:10.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><img src="/2018/04/08/4.两个排序数组的中位数/4.png"><a id="more"></a><h2 id="方法一：先合并"><a href="#方法一：先合并" class="headerlink" title="方法一：先合并"></a>方法一：先合并</h2><p>思路：</p><ol><li>合并两个有序数组；</li><li>排序；</li><li>找中位数；</li><li>but 这样的话原本的数组有不有序又有什么关系呢。。。</li><li>时间复杂度O(m+n)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span><span class="params">(self, nums1, nums2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums1: List[int]</span></span><br><span class="line"><span class="string">        :type nums2: List[int]</span></span><br><span class="line"><span class="string">        :rtype: float</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        m = len(nums1)</span><br><span class="line">        n = len(nums2)</span><br><span class="line">        nums1.extend(nums2)</span><br><span class="line">        nums1 = sorted( nums1 )</span><br><span class="line">        l = len(nums1)</span><br><span class="line">        <span class="keyword">if</span> l % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> nums1[l//<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> ( nums1[l//<span class="number">2</span><span class="number">-1</span>] + nums1[l//<span class="number">2</span>] ) / <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="方法二：二分查找"><a href="#方法二：二分查找" class="headerlink" title="方法二：二分查找"></a>方法二：二分查找</h2><blockquote><p>cr:<a href="https://mzi.red/2017/12/04/leetcode-4/" target="_blank" rel="noopener">两个有序数组的中位数（Hard）</a></p></blockquote><p><strong>不太懂，还是迷迷糊糊的，谁来救救我呀啊啊啊</strong></p><p>思路：<br>这里得提到中位数的性质，在有序的有限数集中，在中位数左边的数的个数与右边的相等。也就是说这个问题可以进一步转化为在nums1数组抽前i个数在nums2数组中抽前j个数，且<br>i+j==halflen,(halflen=(m+n+1)/2)（在奇数情况下左边的数比右边多一个）。所以我们只要二分查找i，通过等式得到<br>j=halflen−i，然后判断是否能满足中位数的条件。<br>为了方便起见，同时减少运算次数，我们把数组size小的放到nums1，大的放到nums2，然后从nums1中查找i。<br>进一步缩小查找范围？对于任意取的值i，我们能得到下面这张图中的关系。绿色的代表左边的数字，黄色的代表的是右边的数字。<br><img src="/2018/04/08/4.两个排序数组的中位数/idea.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span><span class="params">(self, nums1, nums2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums1: List[int]</span></span><br><span class="line"><span class="string">        :type nums2: List[int]</span></span><br><span class="line"><span class="string">        :rtype: float</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        m = len(nums1)</span><br><span class="line">        n = len(nums2)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据数组大小交换顺序，小的在前</span></span><br><span class="line">        <span class="comment"># tmpn = 0</span></span><br><span class="line">        <span class="comment"># tmparr = []</span></span><br><span class="line">        <span class="keyword">if</span> m &gt; n:</span><br><span class="line">        tmpn = m</span><br><span class="line">        m = n</span><br><span class="line">        n = tmpn</span><br><span class="line">        tmparr = nums1</span><br><span class="line">        nums1 = nums2</span><br><span class="line">        nums2 = tmparr</span><br><span class="line"></span><br><span class="line">        imin = <span class="number">0</span></span><br><span class="line">        imax = m</span><br><span class="line">        half_len = (m + n + <span class="number">1</span>)//<span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 二分查找i值</span></span><br><span class="line">        <span class="keyword">while</span> imin &lt;= imax:</span><br><span class="line">        i = (imin + imax) // <span class="number">2</span></span><br><span class="line">        j = half_len - i</span><br><span class="line">        <span class="keyword">if</span> i &lt; m <span class="keyword">and</span> nums2[j - <span class="number">1</span>] &gt; nums1[i] :</span><br><span class="line">        imin = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums1[i - <span class="number">1</span>] &gt; nums2[j] :</span><br><span class="line">        imax = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 左边最大值</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> i:</span><br><span class="line">        max_of_left = nums2[j<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> j:</span><br><span class="line">        max_of_left = nums1[i<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        max_of_left = max(nums1[i<span class="number">-1</span>], nums2[j<span class="number">-1</span>])</span><br><span class="line">        <span class="comment"># 如果总为奇数直接返回左边最大值</span></span><br><span class="line">        <span class="keyword">if</span> (m + n)%<span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> max_of_left</span><br><span class="line">        <span class="comment"># 右边最小值</span></span><br><span class="line">        <span class="keyword">if</span> i == m:</span><br><span class="line">        min_of_right = nums2[j]</span><br><span class="line">        <span class="keyword">elif</span> j == n:</span><br><span class="line">        min_of_right = nums1[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        min_of_right = min(nums1[i], nums2[j])</span><br><span class="line">        <span class="keyword">return</span> (max_of_left + min_of_right) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;img src=&quot;/2018/04/08/4.两个排序数组的中位数/4.png&quot;&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/tags/LeetCode/"/>
    
      <category term="Python" scheme="https://rosevil1874.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>13 - 罗马数字转整数</title>
    <link href="https://rosevil1874.github.io/2018/04/07/13.%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/"/>
    <id>https://rosevil1874.github.io/2018/04/07/13.罗马数字转整数/</id>
    <published>2018-04-07T11:44:26.000Z</published>
    <updated>2018-04-09T05:54:15.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><img src="/2018/04/07/13.罗马数字转整数/13.png"><a id="more"></a><h2 id="罗马数字"><a href="#罗马数字" class="headerlink" title="罗马数字"></a>罗马数字</h2><p>我觉得这位兄台的和百科差不多，又比百科美观，就借过来用用嘻嘻。<br><img src="/2018/04/07/13.罗马数字转整数/RomanNumber.png"></p><h2 id="整数转罗马数字"><a href="#整数转罗马数字" class="headerlink" title="整数转罗马数字"></a>整数转罗马数字</h2><p>cr: <a href="https://blog.csdn.net/net_wolf_007/article/details/51770112" target="_blank" rel="noopener">leetcode 罗马数字与整数的转换算法</a></p><p>idea: 用“放在大数左边的数字只能使用一个”的特点来判断对当前字母是加还是减。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type num: int</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> num &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line">        ret = <span class="string">''</span></span><br><span class="line">        roman = [<span class="string">"M"</span>,<span class="string">"CM"</span>, <span class="string">"D"</span>, <span class="string">"CD"</span>, <span class="string">"C"</span>, <span class="string">"XC"</span>, <span class="string">"L"</span>, <span class="string">"XL"</span>, <span class="string">"X"</span>, <span class="string">"IX"</span>, <span class="string">"V"</span>, <span class="string">"IV"</span>, <span class="string">"I"</span>]</span><br><span class="line">        arab = [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>,<span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">13</span>):</span><br><span class="line">            <span class="keyword">if</span> num &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> num &lt; arab[i]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">while</span> num &gt;= arab[i]:</span><br><span class="line">                    num -= arab[i]</span><br><span class="line">                    ret += roman[i]</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;img src=&quot;/2018/04/07/13.罗马数字转整数/13.png&quot;&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/tags/LeetCode/"/>
    
      <category term="Python" scheme="https://rosevil1874.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>12 - 整数转罗马数字</title>
    <link href="https://rosevil1874.github.io/2018/04/07/12.%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/"/>
    <id>https://rosevil1874.github.io/2018/04/07/12.整数转罗马数字/</id>
    <published>2018-04-07T10:17:26.000Z</published>
    <updated>2018-04-09T05:54:10.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><img src="/2018/04/07/12.整数转罗马数字/12.png"><a id="more"></a><blockquote class="blockquote-center">恕我无知，拿到这题的第一件事就是上搜索引擎，看看罗马数字是咋回事。。。</blockquote><h2 id="罗马数字"><a href="#罗马数字" class="headerlink" title="罗马数字"></a>罗马数字</h2><p>我觉得这位兄台的和百科差不多，又比百科美观，就借过来用用嘻嘻。<br><img src="/2018/04/07/12.整数转罗马数字/RomanNumber.png"></p><h2 id="整数转罗马数字"><a href="#整数转罗马数字" class="headerlink" title="整数转罗马数字"></a>整数转罗马数字</h2><p>cr: <a href="https://blog.csdn.net/net_wolf_007/article/details/51770112" target="_blank" rel="noopener">leetcode 罗马数字与整数的转换算法</a></p><ol><li>数字可以放在左边也可以放在右边，逻辑比较复杂。</li><li>如果都只能放在右边，那样就可以直接使用加法。如9表示为IX, 而如果表示为 VIIII,这样处理相加就OK.  </li><li>可以使用组合数字来进行拆分，使程序能够实现连加的方法。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type num: int</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> num &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line">        ret = <span class="string">''</span></span><br><span class="line">        roman = [<span class="string">"M"</span>,<span class="string">"CM"</span>, <span class="string">"D"</span>, <span class="string">"CD"</span>, <span class="string">"C"</span>, <span class="string">"XC"</span>, <span class="string">"L"</span>, <span class="string">"XL"</span>, <span class="string">"X"</span>, <span class="string">"IX"</span>, <span class="string">"V"</span>, <span class="string">"IV"</span>, <span class="string">"I"</span>]</span><br><span class="line">        arab = [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>,<span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">13</span>):</span><br><span class="line">            <span class="keyword">if</span> num &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> num &lt; arab[i]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">while</span> num &gt;= arab[i]:</span><br><span class="line">                    num -= arab[i]</span><br><span class="line">                    ret += roman[i]</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;img src=&quot;/2018/04/07/12.整数转罗马数字/12.png&quot;&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/tags/LeetCode/"/>
    
      <category term="Python" scheme="https://rosevil1874.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>9 - 回文数</title>
    <link href="https://rosevil1874.github.io/2018/04/07/9.%E5%9B%9E%E6%96%87%E6%95%B0/"/>
    <id>https://rosevil1874.github.io/2018/04/07/9.回文数/</id>
    <published>2018-04-07T09:56:52.000Z</published>
    <updated>2018-04-09T05:53:31.539Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><img src="/2018/04/07/9.回文数/9.png"><a id="more"></a><h2 id="思路一：直接颠倒数字"><a href="#思路一：直接颠倒数字" class="headerlink" title="思路一：直接颠倒数字"></a>思路一：直接颠倒数字</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">        y = x</span><br><span class="line">        r = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">            r = r*<span class="number">10</span> + x%<span class="number">10</span></span><br><span class="line">            x = x // <span class="number">10</span></span><br><span class="line">        <span class="keyword">return</span> r == y</span><br></pre></td></tr></table></figure><h2 id="思路一：转换成字符串颠倒"><a href="#思路一：转换成字符串颠倒" class="headerlink" title="思路一：转换成字符串颠倒"></a>思路一：转换成字符串颠倒</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">        x = str(x)</span><br><span class="line">        y = str(x)[::<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> x == y</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center">这道题是我做了，额，接近十题（惭愧惭愧）以来最最最easy的一题了hiahiahia✧<em>｡٩(ˊᗜˋ</em>)و✧*｡ </blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;img src=&quot;/2018/04/07/9.回文数/9.png&quot;&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/tags/LeetCode/"/>
    
      <category term="Python" scheme="https://rosevil1874.github.io/tags/Python/"/>
    
  </entry>
  
</feed>
