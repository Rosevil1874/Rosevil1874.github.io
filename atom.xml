<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rosevil</title>
  
  <subtitle>Technical reflection, little happiness.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rosevil1874.github.io/"/>
  <updated>2017-12-31T02:52:40.053Z</updated>
  <id>https://rosevil1874.github.io/</id>
  
  <author>
    <name>rosevil1874</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MVC, MVP, MVVM</title>
    <link href="https://rosevil1874.github.io/2017/12/30/MVC-MVP-MVVM/"/>
    <id>https://rosevil1874.github.io/2017/12/30/MVC-MVP-MVVM/</id>
    <published>2017-12-30T09:13:48.000Z</published>
    <updated>2017-12-31T02:52:40.053Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><h3 id="一、什么是MVC开发模式"><a href="#一、什么是MVC开发模式" class="headerlink" title="一、什么是MVC开发模式"></a>一、什么是MVC开发模式</h3><p>M【Model】：模型<br>包含应用程序的业务数据和业务逻辑，主要包括业务逻辑模型（包含应用的业务操作，比如订单的添加或者修改等。）和业务数据模型（存放业务数据，比如订单信息、用户信息等​）。由model提供视图的显示数据，同时一个Model可以为多个视图提供业务数据，因此Model可以提高业务的可重用性。</p><a id="more"></a><p>V【View】：视图<br>即与用户交互的界面，可以给用户显示业务逻辑数据，同时可以接收用户输入的数据。视图层不对数据进行任何的业务逻辑处理。</p><p>C【Controller】：控制器<br>协调模型与视图，根据视图接收的用户请求来决定调用哪个Model模型来处理业务，同时将处理好的数据传给对应的视图来为用户做出应答。</p><img src="/2017/12/30/MVC-MVP-MVVM/MVC.png"><h3 id="二、MVC处理流程："><a href="#二、MVC处理流程：" class="headerlink" title="二、MVC处理流程："></a>二、MVC处理流程：</h3><p>用户通过View将参数提交到Controller；<br>Controller调用对应的Model处理数据；<br>Controller将处理好的数据输出到对应的View给用户。</p><img src="/2017/12/30/MVC-MVP-MVVM/MVC1.png"><h3 id="三、使用MVC的优点"><a href="#三、使用MVC的优点" class="headerlink" title="三、使用MVC的优点"></a>三、使用MVC的优点</h3><p>低耦合性：在MVC模式中，模型和视图是解耦的，模型不会依赖于视图，而视图也仅仅是从模型中获取需要展示的数据，并不会与模型的逻辑处理相关联。<br>更低的开发成本：由于MVC模式帮我们清楚的划分了各部分的职责，就可以让程序员各司其职，Java程序员只关心业务逻辑的实现，也就是模型部分；而界面程序员只关心页面展示，也就是视图部分即可。<br>更好的可维护性：MVC模式划分出明晰的模型和视图部分，并使其解耦，在软件需求发生变更的时候，就可以各自独立的改变而不会相互影响，使得程序更容易维护和扩展。</p><h2 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h2><p>切断的View和Model的联系，让View只和Presenter（原Controller）交互，减少在需求变化中需要维护的对象的数量。<br><img src="/2017/12/30/MVC-MVP-MVVM/MVP.png"></p><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p>ViewModel大致上就是MVP的Presenter和MVC的Controller了，而View和ViewModel间没有了MVP的界面接口，而是直接交互，用数据“绑定”的形式让数据更新的事件不需要开发人员手动去编写特殊用例，而是自动地双向同步。为了用一种统一的集中的方式实现频繁需要被实现的数据更新问题。</p><p>比起MVP，MVVM不仅简化了业务与界面的依赖关系，还优化了数据频繁更新的解决方案，甚至可以说提供了一种有效的解决模式。<br><img src="/2017/12/30/MVC-MVP-MVVM/MVVM.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MVC&quot;&gt;&lt;a href=&quot;#MVC&quot; class=&quot;headerlink&quot; title=&quot;MVC&quot;&gt;&lt;/a&gt;MVC&lt;/h2&gt;&lt;h3 id=&quot;一、什么是MVC开发模式&quot;&gt;&lt;a href=&quot;#一、什么是MVC开发模式&quot; class=&quot;headerlink&quot; title=&quot;一、什么是MVC开发模式&quot;&gt;&lt;/a&gt;一、什么是MVC开发模式&lt;/h3&gt;&lt;p&gt;M【Model】：模型&lt;br&gt;包含应用程序的业务数据和业务逻辑，主要包括业务逻辑模型（包含应用的业务操作，比如订单的添加或者修改等。）和业务数据模型（存放业务数据，比如订单信息、用户信息等​）。由model提供视图的显示数据，同时一个Model可以为多个视图提供业务数据，因此Model可以提高业务的可重用性。&lt;/p&gt;
    
    </summary>
    
      <category term="Programming ideas" scheme="https://rosevil1874.github.io/categories/Programming-ideas/"/>
    
    
  </entry>
  
  <entry>
    <title>Goodbye 2017</title>
    <link href="https://rosevil1874.github.io/2017/12/30/Goodbye-2017/"/>
    <id>https://rosevil1874.github.io/2017/12/30/Goodbye-2017/</id>
    <published>2017-12-30T08:41:20.000Z</published>
    <updated>2017-12-31T03:37:48.394Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">把今年的愿望，再许一遍。</blockquote><h2 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h2><p>2017倒数第二天，我这一年都做了些什么。</p><a id="more"></a><h3 id="大三下"><a href="#大三下" class="headerlink" title="大三下"></a>大三下</h3><p>03-21  加入KEEP，开始一点点运动 :muscle:<br>06-18  骑行10公里，参加毕业音乐会<br>06-24  广州参观实习，火车通宵、各种夜宵、小蛮腰<br>—–  上半年可以说是一片空白了 :broken_heart:</p><h3 id="大四上"><a href="#大四上" class="headerlink" title="大四上"></a>大四上</h3><p>08-15  陪汪大铮在长沙晃哒了一周，炒鸡开心，也比较遗憾自己有些心不在焉(智障障 :zzz: )<br>08-22  准备找工作每天投简历参加笔试，后来准备保研复试<br>—–  南大复试，Java机试0AC，一个人吃了一笼鸡汁灌汤包<br>09-23  复旦复试，和燕子去了上海，鲜肉月饼啧啧啧<br>10-01  开始练字<br>10-02  使用WordPress搭建了第一个自己的博客，立即闲置 :joy:<br>10-29  去46LiveHouse看了谢春花小姐姐的演出<br>11-04  开始家教，给师大大二的小男生上算法，C++，计组<br>11-18  开始“融城计划”，和兰东旭小哥哥一起去给小朋友上音乐课<br>12-23  燕子考研，不用再去接她回宿舍啦<br>12-30  使用GitPage+Hexo搭建了自己的第二个博客，希望能用起来<br>—–  退了天鹅湖的票买了一把小U，开始学习吧<br>—–  粗略学习了python，使用其进行中文微博情感分析</p><img src="/2017/12/30/Goodbye-2017/happiness.jpg"><h2 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h2><p>找不到我的2017新年愿望了，估计一项也没有实现，现在的2018新年愿望很有可能和去年的是一样的(ー_ー)!!</p><ol><li>改变自己最大的心理问题，不要害怕被人看到自己的努力，别人看不到你努力自己同样会努力，你这样会被那些开心积极乐观奋斗的人超越得远远的。不管学习还是生活方面的。</li><li>运动 :point_right: 你的身体不允许懒惰</li><li>饮食 :point_right: 甜食少一点，多巴胺多一点</li><li>作息 :point_right: 早起办到了，还要早睡</li><li>小U  :point_right: 一年很长，能学会的</li><li>练字 :point_right: 慢慢来吧，坚持</li><li>阅读 :point_right: 跳出舒适区</li><li>英语 :point_right: 单词，歌曲，阅读，发声</li><li>生活 :sunny: 你和你的家人朋友才是最重要的</li></ol><div class="note default"><p>你有那么多的收藏夹叫做better me，一定可以做到的呀，慢慢来。 </p></div><img src="/2017/12/30/Goodbye-2017/love.gif" title="爱你哟❤">]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;把今年的愿望，再许一遍。&lt;/blockquote&gt;

&lt;h2 id=&quot;2017&quot;&gt;&lt;a href=&quot;#2017&quot; class=&quot;headerlink&quot; title=&quot;2017&quot;&gt;&lt;/a&gt;2017&lt;/h2&gt;&lt;p&gt;2017倒数第二天，我这一年都做了些什么。&lt;/p&gt;
    
    </summary>
    
      <category term="Diary" scheme="https://rosevil1874.github.io/categories/Diary/"/>
    
    
      <category term="wishes" scheme="https://rosevil1874.github.io/tags/wishes/"/>
    
  </entry>
  
</feed>
