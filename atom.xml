<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rosevil</title>
  
  <subtitle>Technical reflection, little happiness.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rosevil1874.github.io/"/>
  <updated>2018-04-05T11:42:36.333Z</updated>
  <id>https://rosevil1874.github.io/</id>
  
  <author>
    <name>rosevil1874</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>&#39;有效的括号&#39;</title>
    <link href="https://rosevil1874.github.io/2018/04/05/%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7-1/"/>
    <id>https://rosevil1874.github.io/2018/04/05/有效的括号-1/</id>
    <published>2018-04-05T11:42:36.000Z</published>
    <updated>2018-04-05T11:42:36.333Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>&#39;有效的括号&#39;</title>
    <link href="https://rosevil1874.github.io/2018/04/05/%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <id>https://rosevil1874.github.io/2018/04/05/有效的括号/</id>
    <published>2018-04-05T11:40:39.000Z</published>
    <updated>2018-04-05T11:42:08.388Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/04/05/有效的括号/AC.png"><a id="more"></a><img src="/2018/04/05/有效的括号/20.png"><p>数据结构经典题，用栈完美解决。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def isValid(self, s):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        if s is None:</span><br><span class="line">        return false</span><br><span class="line"></span><br><span class="line">        x = [&apos;[&apos;,&apos;(&apos;,&apos;&#123;&apos;]</span><br><span class="line">        y = [&quot;]&quot;,&quot;)&quot;,&quot;&#125;&quot;]</span><br><span class="line">        z = [&quot;()&quot;,&quot;[]&quot;,&quot;&#123;&#125;&quot;]</span><br><span class="line"></span><br><span class="line">        stack = []</span><br><span class="line">        for char in s:</span><br><span class="line">        if char in x:</span><br><span class="line">        stack.append(char)</span><br><span class="line">        elif char in y:</span><br><span class="line">        if len(stack) == 0:</span><br><span class="line">        return False</span><br><span class="line">        else:</span><br><span class="line">        temp = stack.pop(-1) + char</span><br><span class="line">        if temp not in z:</span><br><span class="line">        return False</span><br><span class="line">        if len(stack) != 0:</span><br><span class="line">        return False</span><br><span class="line">        return True</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/04/05/有效的括号/AC.png&quot;&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>&#39;合并两个有序链表&#39;</title>
    <link href="https://rosevil1874.github.io/2018/04/05/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <id>https://rosevil1874.github.io/2018/04/05/合并两个有序链表/</id>
    <published>2018-04-05T10:29:57.000Z</published>
    <updated>2018-04-05T10:44:23.806Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/04/05/合并两个有序链表/AC.png"><a id="more"></a><img src="/2018/04/05/合并两个有序链表/21.png"><h2 id="老老实实翻开数据结构合并吧"><a href="#老老实实翻开数据结构合并吧" class="headerlink" title="老老实实翻开数据结构合并吧"></a>老老实实翻开数据结构合并吧</h2><ol><li>判断链表是否为空，若链表为空则返回空链表；</li><li>创建一个新的空链表；</li><li>创建一个指针pre指向新链表头；</li><li>依次判断两个旧链表头结点val大小，pre指向小的那个，且将这个“小链表”的头指针删去；</li><li>其中一个旧链表全部接到新链表后，将另一个链表剩下的部分接到新链表。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># Definition for singly-linked list.</span><br><span class="line"># class ListNode:</span><br><span class="line">#     def __init__(self, x):</span><br><span class="line">#         self.val = x</span><br><span class="line">#         self.next = None</span><br><span class="line"></span><br><span class="line">class Solution:</span><br><span class="line">    def mergeTwoLists(self, l1, l2):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type l1: ListNode</span><br><span class="line">        :type l2: ListNode</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if l1 is None and is None:</span><br><span class="line">        return None</span><br><span class="line">        else if l1 is None</span><br><span class="line">        return l2</span><br><span class="line">        else if l2 is None:</span><br><span class="line">        return l1</span><br><span class="line"></span><br><span class="line">        new_list = ListNode(0)</span><br><span class="line">        pre = new_list</span><br><span class="line">        while l1 is not None and l2 is not None:</span><br><span class="line">        if l1.val &lt; l2.val:</span><br><span class="line">        pre.next = l1</span><br><span class="line">        l1 = l1.next</span><br><span class="line">        else</span><br><span class="line">        pre.next = l2</span><br><span class="line">        l2 = l2.next</span><br><span class="line">        pre = pre.next</span><br><span class="line"></span><br><span class="line">        if l1 is not None:</span><br><span class="line">        pre.next = l1</span><br><span class="line">        else:</span><br><span class="line">        pre.next = l2</span><br><span class="line"></span><br><span class="line">        return new_list.next</span><br></pre></td></tr></table></figure></li></ol><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def mergeTwoLists(self, l1, l2):</span><br><span class="line">    if not l1:</span><br><span class="line">    return l2</span><br><span class="line">    elif not l2:</span><br><span class="line">    return l1</span><br><span class="line">    else:</span><br><span class="line">    if l1.val &lt; l2.val:</span><br><span class="line">    l1.next = self.mergeTwoLists(l1.next, l2)</span><br><span class="line">    return l1</span><br><span class="line">    else:</span><br><span class="line">    l2.next = self.mergeTwoLists(l1, l2.next)</span><br><span class="line">    return l2</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/04/05/合并两个有序链表/AC.png&quot;&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>电话号码的字母组合&#39;</title>
    <link href="https://rosevil1874.github.io/2018/04/05/%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/"/>
    <id>https://rosevil1874.github.io/2018/04/05/电话号码的字母组合/</id>
    <published>2018-04-05T09:35:27.000Z</published>
    <updated>2018-04-05T09:38:21.144Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/04/05/电话号码的字母组合/AC.png"><a id="more"></a><img src="/2018/04/05/电话号码的字母组合/2.png"><p>第一反应是全排列，但是怎么实现没有想到，久了没有刷过oj已经脑子生锈了。<br>从别人那里借鉴的【深搜 + 递归】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def letterCombinations(self, digits):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type digits: str</span><br><span class="line">        :rtype: List[str]</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        begin = 0#当前需要处理的digits的位置</span><br><span class="line">        path = &apos;&apos;#深搜路径</span><br><span class="line">        res = []#返回结果</span><br><span class="line">        phone = &#123;&apos;2&apos;:&apos;abc&apos;,&apos;3&apos;:&apos;def&apos;,&apos;4&apos;:&apos;ghi&apos;,&apos;5&apos;:&apos;jkl&apos;,&apos;6&apos;:&apos;mno&apos;,&apos;7&apos;:&apos;pqrs&apos;,&apos;8&apos;:&apos;tuv&apos;,&apos;9&apos;:&apos;wxyz&apos;&#125;</span><br><span class="line">        self.deepSearch(digits, begin, path, res, phone)</span><br><span class="line">        return res</span><br><span class="line"></span><br><span class="line">    def deepSearch(self, digits, begin, path, res, phone):</span><br><span class="line">    # 深搜触底，回溯</span><br><span class="line">    if len(path) == len(digits) :</span><br><span class="line">    res.append(path)</span><br><span class="line">    return</span><br><span class="line"></span><br><span class="line">    # 遍历当前数字代表的所有字母</span><br><span class="line">    for char in phone[digits[begin]]:</span><br><span class="line">    path += char</span><br><span class="line">    # 从下一位开始到最后一位的组合情况</span><br><span class="line">    self.deepSearch(digits, begin + 1, path, res, phone)</span><br><span class="line">    path = path[:-1]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/04/05/电话号码的字母组合/AC.png&quot;&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>1. 两数之和 Two Sum</title>
    <link href="https://rosevil1874.github.io/2018/04/05/Sum/"/>
    <id>https://rosevil1874.github.io/2018/04/05/Sum/</id>
    <published>2018-04-05T07:57:27.000Z</published>
    <updated>2018-04-05T09:38:33.657Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/04/05/Sum/AC.png"><a id="more"></a><img src="/2018/04/05/Sum/1.png"><h3 id="1-粗暴，【超时】："><a href="#1-粗暴，【超时】：" class="headerlink" title="1. 粗暴，【超时】："></a>1. 粗暴，【超时】：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def twoSum(self, nums, target):</span><br><span class="line">    for i, a in enumerate(nums):</span><br><span class="line">    for j, b in enumerate(nums):</span><br><span class="line">    if i!=j and a+b == target:</span><br><span class="line">    return (i,j)</span><br></pre></td></tr></table></figure><h3 id="2-先过滤掉明显不可能的元素，再粗暴，下标会变啊喂！【错误】"><a href="#2-先过滤掉明显不可能的元素，再粗暴，下标会变啊喂！【错误】" class="headerlink" title="2. 先过滤掉明显不可能的元素，再粗暴，下标会变啊喂！【错误】"></a>2. 先过滤掉明显不可能的元素，再粗暴，下标会变啊喂！【错误】</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def twoSum(self, nums, target):</span><br><span class="line">    nums = list( filter(lambda x: x &lt;= target, nums) )</span><br><span class="line">    for i, a in enumerate(nums):</span><br><span class="line">    for j, b in enumerate(nums):</span><br><span class="line">    if i!=j and a+b == target:</span><br><span class="line">    return (i,j)</span><br></pre></td></tr></table></figure><h3 id="3-使用字典，hash查找速度666【通过】"><a href="#3-使用字典，hash查找速度666【通过】" class="headerlink" title="3.使用字典，hash查找速度666【通过】"></a>3.使用字典，hash查找速度666【通过】</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def twoSum(self, nums, target):</span><br><span class="line">    tmp = &#123;&#125;</span><br><span class="line">    for i, a in enumerate(nums):</span><br><span class="line">        if target-a in tmp:</span><br><span class="line">            return (tmp[target-a], i)</span><br><span class="line">        else:</span><br><span class="line">            tmp[a] = i</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/04/05/Sum/AC.png&quot;&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://rosevil1874.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Python小记</title>
    <link href="https://rosevil1874.github.io/2018/04/04/Python%E5%B0%8F%E8%AE%B0/"/>
    <id>https://rosevil1874.github.io/2018/04/04/Python小记/</id>
    <published>2018-04-04T10:48:36.000Z</published>
    <updated>2018-04-05T07:36:39.837Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">沉迷尤克里里电影和美丽花衣裳的程序媛要开始LeetCode了，在Java和Python之间义无反顾选择了Python，毕竟要竭尽全力减轻负担啊哈哈。快速自学记录一下语法特别之处吧╮(─▽─)╭<br>cr: <a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">廖雪峰的官方网站</a></blockquote><a id="more"></a><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>ASCII（1个字节）：美国人儿那套；<br>Unicode（2个字节）：把所有语言都统一到一套编码里，这样就不会再有乱码问题了（浪费空间）；<br>UTF-8（可变长编码）：<br>UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间。<br>UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>普通str，以Unicode表示；<br>前缀’r’，防止转义；<br>前缀’b’，bytes类型，一个字节；<br>encode()：如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes；<br>decode()：如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes，需把bytes变为str；<br>.decode(‘utf-8’, errors=’ignore’)：bytes中包含无法解码的字节会报错，这样忽略掉错误；</p><h2 id="dict和set"><a href="#dict和set" class="headerlink" title="dict和set"></a>dict和set</h2><p><strong>dict和list</strong><br>和list比较，dict有以下几个特点：</p><ol><li>查找和插入的速度极快，不会随着key的增加而变慢；</li><li>需要占用大量的内存，内存浪费多。<br>而list相反：</li><li>查找和插入的时间随着元素的增加而增加；</li><li>占用空间小，浪费内存很少。<br>所以，dict是用空间来换取时间的一种方法。</li></ol><p><strong>set和dict</strong></p><ol><li>set和dict唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。</li><li>相同点：key必须是不可变对象。</li></ol><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><strong>定义函数</strong>：<br>如果有必要，可以先对参数的数据类型做检查；<br>函数可以同时返回多个值，但其实就是一个tuple。<br>空函数：pass语句</p><p><strong>函数参数</strong><br>默认参数：一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！<br>可变参数和关键字参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">```**kw```是关键字参数，kw接收的是一个dict。</span><br><span class="line">可变参数既可以直接传入：func(1, 2, 3)，又可以先组装list或tuple，再通过*args传入：func(*(1, 2, 3))；</span><br><span class="line">关键字参数既可以直接传入：func(a=1, b=2)，又可以先组装dict，再通过```**kw```传入：```func(**&#123;&apos;a&apos;: 1, &apos;b&apos;: 2&#125;)```。</span><br><span class="line">使用\*args和```**kw```是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。</span><br><span class="line">命名的关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。</span><br><span class="line">定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符\*，否则定义的将是位置参数。```def person(name, age, *, city, job):</span><br></pre></td></tr></table></figure></p><p><strong>尾递归</strong><br>在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。<br>Python标准的解释器没有针对尾递归做优化。</p><h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><p><strong>切片</strong> L[m:n]：取一个string、list或tuple的部分元素；<br><strong>迭代</strong><br><figure class="highlight plain"><figcaption><span>... in```：只要是可迭代对象，无论有无下标，都可以迭代。判断一个对象是否可迭代对象可通过collections模块的Iterable类型判断：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```from collections import Iterable&gt;&gt;&gt; isinstance(&apos;abc&apos;, Iterable)</span><br></pre></td></tr></table></figure></p><p>默认情况下，dict迭代的是key。如果要迭代value，可以用<figure class="highlight plain"><figcaption><span>value in d.values()```，如果要同时迭代key和value，可以用```for k, v in d.items()```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">实现下标循环：</span><br><span class="line">```for i, value in enumerate([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]):...     print(i, value)</span><br></pre></td></tr></table></figure></p><p><strong>生成器generator</strong><br>generator保存的是算法，每次调用next(g)，就计算出g的下一个元素的值，直到计算到最后一个元素。<br>如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator。在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。<br>generator函数的“调用”实际返回一个generator对象。<br>用for循环调用generator时拿不到generator的return语句的返回值。如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在StopIteration的value中。</p><p><strong>迭代器iterator</strong><br>凡是可作用于for循环的对象都是Iterable类型；<br>凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列（数据流）；<br>集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。<br>Python的for循环本质上就是通过不断调用next()函数实现的。</p><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><p><strong>高阶函数</strong>：<br>把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式。<br>map()函数：接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。<br>reduce：把一个函数作用在一个序列[x1, x2, x3, …]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算<br>filter()：从一个序列中筛出符合条件的元素。由于filter()使用了惰性计算，所以只有在取filter()结果的时候，才会真正筛选并每次返回下一个筛出的元素。<br>排序：<code>sorted([&#39;bob&#39;, &#39;about&#39;, &#39;Zoo&#39;, &#39;Credit&#39;], key=str.lower, reverse=True)</code><br><strong>匿名函数</strong>：<br>lambda，只能有一个表达式，不用写return，返回值就是该表达式的结果。<br>不必担心函数名冲突。<br><strong>偏函数</strong>：<br>当函数的参数个数太多，需要简化时，使用<code>functools.partial</code>可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;沉迷尤克里里电影和美丽花衣裳的程序媛要开始LeetCode了，在Java和Python之间义无反顾选择了Python，毕竟要竭尽全力减轻负担啊哈哈。快速自学记录一下语法特别之处吧╮(─▽─)╭&lt;br&gt;cr: &lt;a href=&quot;https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;廖雪峰的官方网站&lt;/a&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="https://rosevil1874.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue slot实例</title>
    <link href="https://rosevil1874.github.io/2018/01/04/Vue-slot%E5%AE%9E%E4%BE%8B/"/>
    <id>https://rosevil1874.github.io/2018/01/04/Vue-slot实例/</id>
    <published>2018-01-04T12:19:53.000Z</published>
    <updated>2018-01-04T13:39:35.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何理解slot"><a href="#如何理解slot" class="headerlink" title="如何理解slot"></a>如何理解slot</h2><blockquote><p><a href="https://www.zhihu.com/question/37548226?sort=created" target="_blank" rel="noopener">如何理解Vue.js的组件中的slot? Jasin Yip的回答</a></p></blockquote><p>slot 有点类似面向对象思想中的「多态」，比如要实现一个这么 Alert 组件：<br><img src="/2018/01/04/Vue-slot实例/alert.png"></p><p>&lt;slot&gt; 就是外部调用时，标签中的内容。如果外部调用时没有提供内容的话，那么它就会使用自己默认提供的内容，非常方便。</p><a id="more"></a><p>使用组件：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alert</span>&gt;</span><span class="tag">&lt;/<span class="name">alert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alert</span> <span class="attr">type</span>=<span class="string">"success"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Success!<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> Looks good to me!</span><br><span class="line"><span class="tag">&lt;/<span class="name">alert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">alert</span> <span class="attr">type</span>=<span class="string">"warning"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Warning!<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> Something not good.</span><br><span class="line"><span class="tag">&lt;/<span class="name">alert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">alert</span> <span class="attr">type</span>=<span class="string">"error"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Error!<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> Oooops...</span><br><span class="line"><span class="tag">&lt;/<span class="name">alert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>构造组件：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  .Alert__close &#123;</span></span><br><span class="line"><span class="undefined">    font-weight: bold;</span></span><br><span class="line"><span class="undefined">    cursor: pointer;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  .Alert--Success &#123;</span></span><br><span class="line"><span class="undefined">    color: green;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  .Alert--Warning &#123;</span></span><br><span class="line"><span class="undefined">    color: #aa0;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  .Alert--Error &#123;</span></span><br><span class="line"><span class="undefined">    color: red;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"alert-template"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"alertClasses"</span>  <span class="attr">v-show</span>=<span class="string">"show"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Default!<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> Hello World~<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"Alert__close"</span> @<span class="attr">click</span>=<span class="string">"show = false"</span>&gt;</span>x<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'alert'</span>, &#123;</span><br><span class="line">  template: <span class="string">'#alert-template'</span>,</span><br><span class="line">  props: [<span class="string">'type'</span>],</span><br><span class="line">  computed: &#123;</span><br><span class="line">    alertClasses: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'Alert--Success'</span>: <span class="keyword">this</span>.type === <span class="string">'success'</span>,</span><br><span class="line">        <span class="string">'Alert--Warning'</span>: <span class="keyword">this</span>.type === <span class="string">'warning'</span>,</span><br><span class="line">        <span class="string">'Alert--Error'</span>  : <span class="keyword">this</span>.type === <span class="string">'error'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      show: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><blockquote><p>作用域插槽是一种特殊类型的插槽，用作一个 (能被传递数据的)可重用模板，来代替已经渲染好的元素。</p></blockquote><h3 id="slot-scope-用于-元素"><a href="#slot-scope-用于-元素" class="headerlink" title="slot-scope 用于 元素"></a>slot-scope 用于 <template>元素</template></h3><p>在子组件中，只需将数据传递到插槽，就像你将 prop 传递给组件一样。<br>在父级中，具有特殊特性 slot-scope 的 &lt;template&gt;元素必须存在，表示它是作用域插槽的模板。slot-scope 的值将被用作一个临时变量名，此变量接收从子组件传递过来的 prop 对象。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'child'</span>,&#123;</span><br><span class="line">template: <span class="string">'&lt;div class="child"&gt;\</span></span><br><span class="line"><span class="string">&lt;slot text="hello from child"&gt;&lt;/slot&gt;\</span></span><br><span class="line"><span class="string">&lt;/div&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">'parent'</span>, &#123;</span><br><span class="line">template: <span class="string">'&lt;div class="parent"&gt;\</span></span><br><span class="line"><span class="string">  &lt;child&gt;\</span></span><br><span class="line"><span class="string">    &lt;template slot-scope="props"&gt;\</span></span><br><span class="line"><span class="string">      &lt;span&gt;hello from parent&lt;/span&gt;\</span></span><br><span class="line"><span class="string">      &lt;span&gt;&#123;&#123; props.text &#125;&#125;&lt;/span&gt;\</span></span><br><span class="line"><span class="string">    &lt;/template&gt;\</span></span><br><span class="line"><span class="string">  &lt;/child&gt;\</span></span><br><span class="line"><span class="string">&lt;/div&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>渲染结果：<br><img src="/2018/01/04/Vue-slot实例/result1.png"></p><h3 id="slot-scope-可用于任意元素"><a href="#slot-scope-可用于任意元素" class="headerlink" title="slot-scope 可用于任意元素"></a>slot-scope 可用于任意元素</h3><p>作用域插槽更典型的用例是在列表组件中，允许使用者自定义如何渲染列表的每一项：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-awesome-list</span> <span class="attr">:item</span>=<span class="string">"items"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag"><span class="attr">slot</span>=<span class="string">"item"</span></span></span><br><span class="line"><span class="tag"><span class="attr">slot-scope</span>=<span class="string">"props"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"my-fancy-item"</span>&gt;</span></span><br><span class="line">&#123;&#123; props.text &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-awesome-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-awesome-list'</span>,&#123;</span><br><span class="line">template: <span class="string">'&lt;ul&gt;\</span></span><br><span class="line"><span class="string">&lt;slot name="item"\</span></span><br><span class="line"><span class="string">v-for="item in items"\</span></span><br><span class="line"><span class="string">:text="item.text"&gt;\</span></span><br><span class="line"><span class="string">备用内容\</span></span><br><span class="line"><span class="string">&lt;/slot&gt;\</span></span><br><span class="line"><span class="string">&lt;/ul&gt;'</span>,</span><br><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">items: [</span><br><span class="line">&#123;<span class="attr">text</span>: <span class="string">"111"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">text</span>: <span class="string">"222"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">text</span>: <span class="string">"333"</span>&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">"#app"</span>,</span><br><span class="line">data: &#123;</span><br><span class="line">items: [</span><br><span class="line"><span class="comment">// &#123;text: "111"&#125;,</span></span><br><span class="line"><span class="comment">// &#123;text: "222"&#125;,</span></span><br><span class="line"><span class="comment">// &#123;text: "333"&#125;</span></span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">incrementTotal : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.total += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>渲染结果：<br><img src="/2018/01/04/Vue-slot实例/result2.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如何理解slot&quot;&gt;&lt;a href=&quot;#如何理解slot&quot; class=&quot;headerlink&quot; title=&quot;如何理解slot&quot;&gt;&lt;/a&gt;如何理解slot&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/37548226?sort=created&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;如何理解Vue.js的组件中的slot? Jasin Yip的回答&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;slot 有点类似面向对象思想中的「多态」，比如要实现一个这么 Alert 组件：&lt;br&gt;&lt;img src=&quot;/2018/01/04/Vue-slot实例/alert.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;slot&amp;gt; 就是外部调用时，标签中的内容。如果外部调用时没有提供内容的话，那么它就会使用自己默认提供的内容，非常方便。&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://rosevil1874.github.io/categories/Vue/"/>
    
    
      <category term="Vue 学习笔记" scheme="https://rosevil1874.github.io/tags/Vue-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>MVC, MVP, MVVM</title>
    <link href="https://rosevil1874.github.io/2017/12/30/MVC-MVP-MVVM/"/>
    <id>https://rosevil1874.github.io/2017/12/30/MVC-MVP-MVVM/</id>
    <published>2017-12-30T09:13:48.000Z</published>
    <updated>2017-12-31T02:52:40.053Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><h3 id="一、什么是MVC开发模式"><a href="#一、什么是MVC开发模式" class="headerlink" title="一、什么是MVC开发模式"></a>一、什么是MVC开发模式</h3><p>M【Model】：模型<br>包含应用程序的业务数据和业务逻辑，主要包括业务逻辑模型（包含应用的业务操作，比如订单的添加或者修改等。）和业务数据模型（存放业务数据，比如订单信息、用户信息等​）。由model提供视图的显示数据，同时一个Model可以为多个视图提供业务数据，因此Model可以提高业务的可重用性。</p><a id="more"></a><p>V【View】：视图<br>即与用户交互的界面，可以给用户显示业务逻辑数据，同时可以接收用户输入的数据。视图层不对数据进行任何的业务逻辑处理。</p><p>C【Controller】：控制器<br>协调模型与视图，根据视图接收的用户请求来决定调用哪个Model模型来处理业务，同时将处理好的数据传给对应的视图来为用户做出应答。</p><img src="/2017/12/30/MVC-MVP-MVVM/MVC.png"><h3 id="二、MVC处理流程："><a href="#二、MVC处理流程：" class="headerlink" title="二、MVC处理流程："></a>二、MVC处理流程：</h3><p>用户通过View将参数提交到Controller；<br>Controller调用对应的Model处理数据；<br>Controller将处理好的数据输出到对应的View给用户。</p><img src="/2017/12/30/MVC-MVP-MVVM/MVC1.png"><h3 id="三、使用MVC的优点"><a href="#三、使用MVC的优点" class="headerlink" title="三、使用MVC的优点"></a>三、使用MVC的优点</h3><p>低耦合性：在MVC模式中，模型和视图是解耦的，模型不会依赖于视图，而视图也仅仅是从模型中获取需要展示的数据，并不会与模型的逻辑处理相关联。<br>更低的开发成本：由于MVC模式帮我们清楚的划分了各部分的职责，就可以让程序员各司其职，Java程序员只关心业务逻辑的实现，也就是模型部分；而界面程序员只关心页面展示，也就是视图部分即可。<br>更好的可维护性：MVC模式划分出明晰的模型和视图部分，并使其解耦，在软件需求发生变更的时候，就可以各自独立的改变而不会相互影响，使得程序更容易维护和扩展。</p><h2 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h2><p>切断的View和Model的联系，让View只和Presenter（原Controller）交互，减少在需求变化中需要维护的对象的数量。<br><img src="/2017/12/30/MVC-MVP-MVVM/MVP.png"></p><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p>ViewModel大致上就是MVP的Presenter和MVC的Controller了，而View和ViewModel间没有了MVP的界面接口，而是直接交互，用数据“绑定”的形式让数据更新的事件不需要开发人员手动去编写特殊用例，而是自动地双向同步。为了用一种统一的集中的方式实现频繁需要被实现的数据更新问题。</p><p>比起MVP，MVVM不仅简化了业务与界面的依赖关系，还优化了数据频繁更新的解决方案，甚至可以说提供了一种有效的解决模式。<br><img src="/2017/12/30/MVC-MVP-MVVM/MVVM.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MVC&quot;&gt;&lt;a href=&quot;#MVC&quot; class=&quot;headerlink&quot; title=&quot;MVC&quot;&gt;&lt;/a&gt;MVC&lt;/h2&gt;&lt;h3 id=&quot;一、什么是MVC开发模式&quot;&gt;&lt;a href=&quot;#一、什么是MVC开发模式&quot; class=&quot;headerlink&quot; title=&quot;一、什么是MVC开发模式&quot;&gt;&lt;/a&gt;一、什么是MVC开发模式&lt;/h3&gt;&lt;p&gt;M【Model】：模型&lt;br&gt;包含应用程序的业务数据和业务逻辑，主要包括业务逻辑模型（包含应用的业务操作，比如订单的添加或者修改等。）和业务数据模型（存放业务数据，比如订单信息、用户信息等​）。由model提供视图的显示数据，同时一个Model可以为多个视图提供业务数据，因此Model可以提高业务的可重用性。&lt;/p&gt;
    
    </summary>
    
      <category term="Programming ideas" scheme="https://rosevil1874.github.io/categories/Programming-ideas/"/>
    
    
  </entry>
  
  <entry>
    <title>Goodbye 2017</title>
    <link href="https://rosevil1874.github.io/2017/12/30/Goodbye-2017/"/>
    <id>https://rosevil1874.github.io/2017/12/30/Goodbye-2017/</id>
    <published>2017-12-30T08:41:20.000Z</published>
    <updated>2018-01-04T13:48:11.519Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">把今年的愿望，再许一遍。</blockquote><h2 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h2><p>2017倒数第二天，我这一年都做了些什么。</p><a id="more"></a><h3 id="大三下"><a href="#大三下" class="headerlink" title="大三下"></a>大三下</h3><p>03-21  加入KEEP，开始一点点运动 :muscle:<br>06-18  骑行10公里，参加毕业音乐会<br>06-24  广州参观实习，火车通宵、各种夜宵、小蛮腰<br>—–  上半年可以说是一片空白了 :broken_heart:</p><h3 id="大四上"><a href="#大四上" class="headerlink" title="大四上"></a>大四上</h3><p>08-15  陪汪大铮在长沙晃哒了一周，炒鸡开心，也比较遗憾自己有些心不在焉(智障障 :zzz: )<br>08-22  准备找工作每天投简历参加笔试，后来准备保研复试<br>—–  南大复试，Java机试0AC，一个人吃了一笼鸡汁灌汤包<br>09-23  复旦复试，和燕子去了上海，鲜肉月饼啧啧啧<br>10-01  开始练字<br>10-02  使用WordPress搭建了第一个自己的博客，立即闲置 :joy:<br>10-29  去46LiveHouse看了谢春花小姐姐的演出<br>11-04  开始家教，给师大大二的小男生上算法，C++，计组<br>11-18  开始“融城计划”，和兰东旭小哥哥一起去给小朋友上音乐课<br>12-23  燕子考研，不用再去接她回宿舍啦<br>12-30  使用GitPage+Hexo搭建了自己的第二个博客，希望能用起来<br>—–  退了天鹅湖的票买了一把小U，开始学习吧<br>—–  粗略学习了python，使用其进行中文微博情感分析</p><img src="/2017/12/30/Goodbye-2017/happiness.jpg"><h2 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h2><p>找不到我的2017新年愿望了，估计一项也没有实现，现在的2018新年愿望很有可能和去年的是一样的(ー_ー)!!</p><ol><li>改变自己最大的心理问题，不要害怕被人看到自己的努力，别人看不到你努力自己同样会努力，你这样会被那些开心积极乐观奋斗的人超越得远远的。不管学习还是生活方面的。</li><li>运动 :point_right: 你的身体不允许懒惰</li><li>饮食 :point_right: 甜食少一点，多巴胺多一点</li><li>作息 :point_right: 早起办到了，还要早睡</li><li>小U  :point_right: 一年很长，能学会的</li><li>练字 :point_right: 慢慢来吧，坚持</li><li>阅读 :point_right: 跳出舒适区</li><li>英语 :point_right: 单词，歌曲，阅读，发声</li><li>生活 :sunny: 你和你的家人朋友才是最重要的</li></ol><div class="note default"><p>你有那么多的收藏夹叫做better me，一定可以做到的呀，慢慢来。 </p></div><img src="/2017/12/30/Goodbye-2017/love.gif" title="爱你哟❤">]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;把今年的愿望，再许一遍。&lt;/blockquote&gt;

&lt;h2 id=&quot;2017&quot;&gt;&lt;a href=&quot;#2017&quot; class=&quot;headerlink&quot; title=&quot;2017&quot;&gt;&lt;/a&gt;2017&lt;/h2&gt;&lt;p&gt;2017倒数第二天，我这一年都做了些什么。&lt;/p&gt;
    
    </summary>
    
      <category term="Diary" scheme="https://rosevil1874.github.io/categories/Diary/"/>
    
    
      <category term="wishes" scheme="https://rosevil1874.github.io/tags/wishes/"/>
    
  </entry>
  
</feed>
