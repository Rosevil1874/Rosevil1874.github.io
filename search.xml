<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MVC, MVP, MVVM]]></title>
    <url>%2F2017%2F12%2F30%2FMVC-MVP-MVVM%2F</url>
    <content type="text"><![CDATA[mvc一、什么是MVC开发模式M【Model】：模型包含应用程序的业务数据和业务逻辑，主要包括业务逻辑模型（包含应用的业务操作，比如订单的添加或者修改等。）和业务数据模型（存放业务数据，比如订单信息、用户信息等​）。由model提供视图的显示数据，同时一个Model可以为多个视图提供业务数据，因此Model可以提高业务的可重用性。 V【View】：视图即与用户交互的界面，可以给用户显示业务逻辑数据，同时可以接收用户输入的数据。视图层不对数据进行任何的业务逻辑处理。 C【Controller】：控制器协调模型与视图，根据视图接收的用户请求来决定调用哪个Model模型来处理业务，同时将处理好的数据传给对应的视图来为用户做出应答。 二、MVC处理流程：用户通过View将参数提交到Controller；Controller调用对应的Model处理数据；Controller将处理好的数据输出到对应的View给用户。 三、使用MVC的优点低耦合性：在MVC模式中，模型和视图是解耦的，模型不会依赖于视图，而视图也仅仅是从模型中获取需要展示的数据，并不会与模型的逻辑处理相关联。更低的开发成本：由于MVC模式帮我们清楚的划分了各部分的职责，就可以让程序员各司其职，Java程序员只关心业务逻辑的实现，也就是模型部分；而界面程序员只关心页面展示，也就是视图部分即可。更好的可维护性：MVC模式划分出明晰的模型和视图部分，并使其解耦，在软件需求发生变更的时候，就可以各自独立的改变而不会相互影响，使得程序更容易维护和扩展。 MVP切断的View和Model的联系，让View只和Presenter（原Controller）交互，减少在需求变化中需要维护的对象的数量。 MVVMViewModel大致上就是MVP的Presenter和MVC的Controller了，而View和ViewModel间没有了MVP的界面接口，而是直接交互，用数据“绑定”的形式让数据更新的事件不需要开发人员手动去编写特殊用例，而是自动地双向同步。为了用一种统一的集中的方式实现频繁需要被实现的数据更新问题。 比起MVP，MVVM不仅简化了业务与界面的依赖关系，还优化了数据频繁更新的解决方案，甚至可以说提供了一种有效的解决模式。]]></content>
      <categories>
        <category>Programming ideas</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Goodbye 2017]]></title>
    <url>%2F2017%2F12%2F30%2FGoodbye-2017%2F</url>
    <content type="text"><![CDATA[把今年的愿望，再许一遍。 20172017倒数第二天，我这一年都做了些什么。 2018找不到我的2017新年愿望了，估计一项也没有实现，现在的2018新年愿望很有可能和去年的是一样的(ー_ー)!! 改变自己最大的心理问题，不要害怕被人看到自己的努力，别人看不到你努力自己同样会努力，你这样会被那些开心积极乐观奋斗的人超越得远远的。不管学习还是生活方面的。 运动-你的身体不允许懒惰 饮食习惯-甜食少一点，多巴胺多一点 作息-早起办到了，还要早睡 尤克里里-一年很长，能学会的 书法-慢慢来吧，坚持 阅读-跳出舒适区 英语-单词，歌曲，阅读，发声 你有那么多的收藏夹叫做better me，一定可以做到的呀，慢慢来。]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>wishes</tag>
      </tags>
  </entry>
</search>
